=== Project Directory Structure ===
Root: C:\Users\viktor.jonsson\OneDrive - CellMax Technologies AB\Documents\Repositories\svenviktorjonsson\platonic-play
Relevant files and folders (excluding specified patterns):

.
├── index.html
├── project_content.txt
├── readme.md
├── script.js
├── style.css
├── utils.js
├── write_content_to_file.py


=== File Contents ===

=== index.html ===
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Platonic Play</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css" integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV" crossorigin="anonymous">
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <div class="canvas-container">
            <div class="canvas-wrapper-relative">
                <canvas id="drawingCanvas"></canvas>
                <div id="html-overlay"></div>
            </div>
        </div>
    </div>

    <input type="color" id="colorPicker" value="#ffffff">

    <script src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js" integrity="sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8" crossorigin="anonymous"></script>
    <script type="module" src="script.js"></script>
</body>
</html>

=== project_content.txt ===
--- CONTENT EXCLUDED (listed in exclude_files) ---


=== readme.md ===



=== script.js ===
import {
    formatNumber,
    formatCoordinateValue,
    generateAngleSnapFractions,
    solveForPoint,
    generateUniqueId,
    normalize,
    normalizeAngleToPi,
    normalizeAngleDegrees,
    generateDistanceSnapFactors,
    distance,
    formatFraction,
    hslToRgb,
    getClosestPointOnLineSegment,
    getMousePosOnCanvas,
    snapToAngle,
    formatSnapFactor,
    simplifySquareRoot,
    formatSimplifiedRoot
} from './utils.js';

const canvas = document.getElementById('drawingCanvas');
const ctx = canvas.getContext('2d');
const htmlOverlay = document.getElementById('html-overlay');
const colorPicker = document.getElementById('colorPicker');

const POINT_RADIUS = 5;
const CENTER_POINT_VISUAL_RADIUS = POINT_RADIUS * 2;
const POINT_SELECT_RADIUS = 10;
const LINE_WIDTH = 2;
const GRID_LINEWIDTH = 1;
const DASH_PATTERN = [6, 6];
const SELECTED_INDICATOR_OFFSET = 3;
const DOUBLE_CLICK_MS = 300;
const DRAG_THRESHOLD = 3;
const EDGE_CLICK_THRESHOLD = 7;
const dpr = window.devicePixelRatio || 1;
const FROZEN_REFERENCE_COLOR = 'rgba(240, 240, 130, 0.95)'
const BACKGROUND_COLOR = 'rgba(0,0,0, 1)'

const DEFAULT_CALIBRATION_VIEW_SCALE = 80.0;
const DEFAULT_REFERENCE_DISTANCE = 1.0;
const DEFAULT_REFERENCE_ANGLE_RAD = Math.PI / 2;
const DEFAULT_POLAR_ANGLE_DIFF = 30

const UI_BUTTON_PADDING = 10;
const UI_TOOLBAR_WIDTH = 56;
const UI_SWATCH_SIZE = 30;

const FEEDBACK_COLOR_SNAPPED = 'rgba(240, 240, 130, 0.95)';
const FEEDBACK_COLOR_DEFAULT = 'rgba(230, 230, 230, 0.95)';
const FEEDBACK_LABEL_FONT_SIZE = 12;
const FEEDBACK_ARC_RADIUS_SCREEN = 30;
const FEEDBACK_DISTANCE_LABEL_OFFSET_SCREEN = 18;
const GEOMETRY_CALCULATION_EPSILON = 1e-6; // Small numerical tolerance for floating-point comparisons in geometry
const VERTICAL_LINE_COS_THRESHOLD = 0.1; // Cosine value threshold to visually determine if a line is vertical for label placement
const ANGLE_LABEL_RADIUS_SCREEN = 75; // Screen radius for positioning angle labels around a vertex
const FEEDBACK_LINE_VISUAL_WIDTH = 1; // Line width for drawing visual feedback elements like arcs

const SNAP_STICKINESS_RADIUS_SCREEN = 30;
const LINE_TO_SNAP_RADIUS_SCREEN = 10;
const POINT_ON_LINE_SNAP_RADIUS_SCREEN = 15;
const DRAG_SNAP_GEOMETRIC_DISTANCE_FACTORS = [0.5, 1, 1.5, 2, 3, 4, 5];
const DRAW_SNAP_CANDIDATE_COUNT_PER_SIDE = 2;
const DRAW_SNAP_DISTANCE_FACTOR_STEP = 0.5;
const DRAW_SNAP_DISTANCE_FACTOR_LIMIT = 50;
const GHOST_SNAP_RADIUS_SCREEN = 30;

const REF_TEXT_SCREEN_PIXEL_THRESHOLD = 1.5; // Minimum screen distance in pixels for reference text to appear
const REF_TEXT_KATEX_FONT_SIZE = 11; // Font size for reference labels rendered with KaTeX
const REF_TEXT_DISTANCE_LABEL_OFFSET_SCREEN = 18; // Screen offset for distance labels from the line midpoint
const REF_TEXT_ANGLE_LABEL_OFFSET_SCREEN = 50; // Screen offset for angle labels from the vertex (35 + 15)

const MAX_HISTORY_SIZE = 50;

const MAX_FRACTION_DENOMINATOR_FOR_ANGLE_SNAPS = 6;
const MAX_BASE_ANGLE_MULTIPLIER_FOR_SNAPS = 2;
const ANGLE_SNAP_FRACTIONS = generateAngleSnapFractions(
    MAX_FRACTION_DENOMINATOR_FOR_ANGLE_SNAPS,
    MAX_BASE_ANGLE_MULTIPLIER_FOR_SNAPS
);

const MAX_INITIAL_METER_SNAP_MULTIPLIER = 10;
const INITIAL_DISTANCE_SNAP_FACTORS = generateAngleSnapFractions(
    MAX_FRACTION_DENOMINATOR_FOR_ANGLE_SNAPS,
    MAX_INITIAL_METER_SNAP_MULTIPLIER
);

const MAX_SNAP_DENOMINATOR = 6;
const MAX_SNAP_INTEGER = 10;
const NINETY_DEG_ANGLE_SNAP_FRACTIONS = (() => {
    const uniqueFractions = new Set();
    const denominators = [1, 2, 3, 4, 5, 6];
    for (const q of denominators) {
        // Generate fractions for angles up to 360 degrees (p/q * 90 <= 360 => p/q <= 4)
        for (let p = 1; p <= q * 4; p++) {
            uniqueFractions.add(p / q);
        }
    }
    return Array.from(uniqueFractions).sort((a, b) => a - b);
})();

const SNAP_FACTORS = generateSnapFactors(MAX_SNAP_DENOMINATOR, MAX_SNAP_INTEGER);


let frozenReference_A_rad = null;
let frozenReference_A_baseRad = null;
let frozenReference_D_du = null;
let frozenReference_Origin_Data = null;
let isMouseOverCanvas = false;
let placingSnapPos = null;
let isDisplayPanelExpanded = false;
let coordsDisplayMode = 'regular';    // Options: 'regular', 'complex', 'polar', 'none'
let gridDisplayMode = 'lines';      // Options: 'lines', 'points', 'none'
let angleDisplayMode = 'degrees';  // Options: 'degrees', 'radians', 'none'
let distanceDisplayMode = 'on';    // Options: 'on', 'none'
let isEdgeTransformDrag = false;
let isDraggingCenter = false;
let allPoints = [];
let allEdges = [];
let selectedPointIds = [];
let selectedEdgeIds = [];
let activeCenterId = null;
let mousePos = { x: 0, y: 0 };
let currentColor = '#ffffff';
let frozenReference_D_g2g = null;
let isToolbarExpanded = false;
let isColorPaletteExpanded = false;
let selectedSwatchIndex = null;
let isTransformPanelExpanded = false;
let isPlacingTransform = false;
let placingTransformType = null;
let drawingSequence = [];
let currentSequenceIndex = 0;
let showAngles = true;
let showDistances = true;
let angleSigFigs = 4;
let distanceSigFigs = 3;
let gridAlpha = 0.5;
let colorWheelIcon = null
let transformIndicatorData = null;

let viewTransform = {
    scale: DEFAULT_CALIBRATION_VIEW_SCALE,
    offsetX: 0,
    offsetY: 0
};

let lastAngularGridState = {
    angle1: 30,
    angle2: 15,
    alpha1: 1,
    alpha2: 0,
};

let isActionInProgress = false;
let isDragConfirmed = false;
let isPanningBackground = false;
let isRectangleSelecting = false;
let currentMouseButton = -1;
let actionStartPos = { x: 0, y: 0 };
let backgroundPanStartOffset = { x: 0, y: 0 };
let initialDragPointStates = [];
let rectangleSelectStartPos = { x: 0, y: 0 };
let actionContext = null;
let recentColors = ['#ffffff', '#ff4444', '#44ff44', '#4444ff', '#ffff44', '#ff44ff', '#44ffff', '#ffa544'];
let isDrawingMode = false;
let previewLineStartPointId = null;
let actionTargetPoint = null;
let dragPreviewPoints = [];
let currentShiftPressed = false;
let clipboard = { points: [], edges: [], referencePoint: null };
let clickData = { targetId: null, type: null, count: 0, timestamp: 0 };
let undoStack = [];
let redoStack = [];
let ghostPointPosition = null;
let selectedCenterIds = []; // ADD THIS NEW STATE VARIABLE

let lastGridState = {
    interval1: null,
    interval2: null,
    alpha1: 0,
    alpha2: 0,
    scale: null
};

let lastSnapResult = null;
const activeHtmlLabels = new Map();
let labelsToKeepThisFrame = new Set();

function generateSnapFactors(maxDenominator, maxInteger) {
    const fractionsSet = new Set();
    fractionsSet.add(0);
    for (let q = 1; q <= maxDenominator; q++) {
        for (let p = 1; p <= q * maxInteger; p++) {
            fractionsSet.add(p / q);
        }
    }
    return Array.from(fractionsSet).sort((a, b) => a - b);
}


function normalizeAngle(angleRad) {
    while (angleRad < 0) angleRad += 2 * Math.PI;
    while (angleRad >= 2 * Math.PI) angleRad -= 2 * Math.PI;
    return angleRad;
}

function handleCenterSelection(centerId, shiftKey, ctrlKey) {
    if (ctrlKey) {
        const index = selectedCenterIds.indexOf(centerId);
        if (index > -1) {
            selectedCenterIds.splice(index, 1);
        } else {
            selectedCenterIds.push(centerId);
        }
    } else if (shiftKey) {
        if (!selectedCenterIds.includes(centerId)) {
            selectedCenterIds.push(centerId);
        }
    } else {
        // If the clicked center is already the only one selected, do nothing.
        if (selectedCenterIds.length === 1 && selectedCenterIds[0] === centerId) {
            return;
        }
        // Otherwise, select only the clicked center.
        selectedCenterIds = [centerId];
    }
    
    // Update the active center to be the last one selected.
    activeCenterId = selectedCenterIds.length > 0 ? selectedCenterIds[selectedCenterIds.length - 1] : null;
}

function getBestSnapPosition(mouseDataPos) {
    const candidates = [];
    const distanceSq = (p1, p2) => (p1.x - p2.x)**2 + (p1.y - p2.y)**2;
    
    // Grid candidates
    if (gridDisplayMode !== 'none') {
        if (gridDisplayMode === 'polar') {
            const dominantRadialInterval = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
            if (dominantRadialInterval > 0) {
                const mouseAngleDeg = (Math.atan2(mouseDataPos.y, mouseDataPos.x) * 180 / Math.PI + 360) % 360;
                const mouseRadius = Math.hypot(mouseDataPos.x, mouseDataPos.y);
                const snappedRadius = Math.round(mouseRadius / dominantRadialInterval) * dominantRadialInterval;

                lastAngularGridState.forEach(level => {
                    if (level.alpha > 0.01 && level.angle > 0) {
                        const angularInterval = level.angle;
                        const snappedAngleDeg = Math.round(mouseAngleDeg / angularInterval) * angularInterval;
                        const snappedAngleRad = snappedAngleDeg * Math.PI / 180;
                        const gridPoint = { x: snappedRadius * Math.cos(snappedAngleRad), y: snappedRadius * Math.sin(snappedAngleRad) };
                        candidates.push({ pos: gridPoint, distSq: distanceSq(mouseDataPos, gridPoint) });
                    }
                });
            }
        } else { // Rectilinear grid
            const gridInterval = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
            if (gridInterval > 0) {
                const gridPoint = { x: Math.round(mouseDataPos.x / gridInterval) * gridInterval, y: Math.round(mouseDataPos.y / gridInterval) * gridInterval };
                candidates.push({ pos: gridPoint, distSq: distanceSq(mouseDataPos, gridPoint) });
            }
        }
    }

    // Existing regular points
    allPoints.forEach(p => { 
        if (p.type === 'regular') {
            candidates.push({ pos: p, distSq: distanceSq(mouseDataPos, p) }); 
        }
    });

    // Midpoints of existing edges
    allEdges.forEach(edge => {
        const p1 = findPointById(edge.id1);
        const p2 = findPointById(edge.id2);
        if (p1 && p2 && p1.type === 'regular' && p2.type === 'regular') {
            const midpoint = { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 };
            candidates.push({ pos: midpoint, distSq: distanceSq(mouseDataPos, midpoint) });
        }
    });

    // Always return the closest candidate if any exist; otherwise, return null.
    if (candidates.length === 0) return null;
    const bestCandidate = candidates.sort((a, b) => a.distSq - b.distSq)[0];
    return bestCandidate.pos;
}

function getTransformSnap(center, mouseDataPos, startReferencePoint, transformType) {
    const allCandidates = [];
    const startVector = { x: startReferencePoint.x - center.x, y: startReferencePoint.y - center.y };
    const startDist = Math.hypot(startVector.x, startVector.y);
    const startAngle = Math.atan2(startVector.y, startVector.x);

    if (gridDisplayMode !== 'none') {
        const mouseRelativeToCenter = { x: mouseDataPos.x - center.x, y: mouseDataPos.y - center.y };

        if (gridDisplayMode === 'polar') {
            const dominantRadialInterval = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
            if (dominantRadialInterval > 0) {
                const mouseAngleDeg = (Math.atan2(mouseRelativeToCenter.y, mouseRelativeToCenter.x) * 180 / Math.PI + 360) % 360;
                const mouseRadius = Math.hypot(mouseRelativeToCenter.x, mouseRelativeToCenter.y);
                const snappedRadius = Math.round(mouseRadius / dominantRadialInterval) * dominantRadialInterval;
                
                lastAngularGridState.forEach(level => {
                    if (level.alpha > 0.01 && level.angle > 0) {
                        const angularInterval = level.angle;
                        const snappedAngleDeg = Math.round(mouseAngleDeg / angularInterval) * angularInterval;
                        const snappedAngleRad = snappedAngleDeg * Math.PI / 180;
                        allCandidates.push({
                            pos: { x: center.x + snappedRadius * Math.cos(snappedAngleRad), y: center.y + snappedRadius * Math.sin(snappedAngleRad) },
                            type: 'grid', pureRotation: null, pureScale: null
                        });
                    }
                });
            }
        } else {
            const gridInterval = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
            if (gridInterval > 0) {
                const snappedRelativeX = Math.round(mouseRelativeToCenter.x / gridInterval) * gridInterval;
                const snappedRelativeY = Math.round(mouseRelativeToCenter.y / gridInterval) * gridInterval;
                allCandidates.push({
                    pos: { x: center.x + snappedRelativeX, y: center.y + snappedRelativeY },
                    type: 'grid', pureRotation: null, pureScale: null
                });
            }
        }
    }

    if (startDist > GEOMETRY_CALCULATION_EPSILON) {
        const scaleSnapFactors = SNAP_FACTORS.filter(f => f > 0);
        const angleSnapFractions = NINETY_DEG_ANGLE_SNAP_FRACTIONS;
        const useAngleSnaps = transformType !== 'center_scale_only';
        const useScaleSnaps = transformType !== 'center_rotate_only';
        const rotationSnaps = useAngleSnaps ? angleSnapFractions.flatMap(f => (f === 0 ? [0] : [f * Math.PI / 2, -f * Math.PI / 2])) : [0];
        const scaleSnaps = useScaleSnaps ? scaleSnapFactors : [1];
        for (const rot of rotationSnaps) {
            for (const factor of scaleSnaps) {
                const dist = startDist * factor;
                allCandidates.push({
                    pos: { x: center.x + dist * Math.cos(startAngle + rot), y: center.y + dist * Math.sin(startAngle + rot) },
                    type: 'transform', pureRotation: rot, pureScale: factor
                });
            }
        }
    }

    if (allCandidates.length === 0) return { snapped: false };

    let bestCandidate = allCandidates.reduce((best, current) => {
        const distSq = (p, c) => (p.x - c.pos.x) ** 2 + (p.y - c.pos.y) ** 2;
        return distSq(mouseDataPos, current) < distSq(mouseDataPos, best) ? current : best;
    });

    const finalVec = { x: bestCandidate.pos.x - center.x, y: bestCandidate.pos.y - center.y };
    const finalScale = (startDist > GEOMETRY_CALCULATION_EPSILON) ? Math.hypot(finalVec.x, finalVec.y) / startDist : 1;
    let finalRotation;
    if (bestCandidate.pureRotation !== null) {
        const rawMouseRotation = normalizeAngleToPi(Math.atan2(mouseDataPos.y - center.y, mouseDataPos.x - center.x) - startAngle);
        const pureRot = bestCandidate.pureRotation;
        const rotationsToTest = [pureRot, pureRot + 2 * Math.PI, pureRot - 2 * Math.PI];
        finalRotation = rotationsToTest.reduce((best, current) => {
            return Math.abs(current - rawMouseRotation) < Math.abs(best - rawMouseRotation) ? current : best;
        });
    } else {
        finalRotation = normalizeAngleToPi(Math.atan2(finalVec.y, finalVec.x) - startAngle);
    }
    return {
        snapped: true, pos: bestCandidate.pos, rotation: finalRotation,
        scale: bestCandidate.pureScale ?? finalScale,
        pureScaleForDisplay: bestCandidate.pureScale
    };
}

function getSnappedPosition(startPoint, mouseScreenPos, shiftPressed) {
    const mouseDataPos = screenToData(mouseScreenPos);
    const drawingContext = getDrawingContext(startPoint.id);

    const distanceSq = (p1, p2) => (p1.x - p2.x)**2 + (p1.y - p2.y)**2;

    // List to hold potential snap candidates from categories other than direct hits
    const categorizedSnapCandidates = []; 

    // 1. High Priority: Direct hits on existing points. If the mouse is very close, snap immediately.
    const pointSelectRadiusData = POINT_SELECT_RADIUS / viewTransform.scale;
    for (const p of allPoints) {
        if (p.id !== startPoint.id && p.type === "regular" && distance(mouseDataPos, p) < pointSelectRadiusData) {
            const finalAngleRad = Math.atan2(p.y - startPoint.y, p.x - startPoint.x) || 0;
            return { x: p.x, y: p.y, angle: finalAngleRad * (180 / Math.PI), distance: distance(startPoint, p), snapped: true, gridSnapped: false, lengthSnapFactor: null, angleSnapFactor: null, angleTurn: normalizeAngleToPi(finalAngleRad, 0), gridToGridSquaredSum: null, gridInterval: null };
        }
    }

    // 2. High Priority: Direct hits on existing edges (projection onto the segment). If very close, snap immediately.
    const edgeClickThresholdData = EDGE_CLICK_THRESHOLD / viewTransform.scale;
    for (const edge of allEdges) {
        const p1 = findPointById(edge.id1);
        const p2 = findPointById(edge.id2);
        if (p1 && p2 && p1.type === "regular" && p2.type === "regular" && p1.id !== startPoint.id && p2.id !== startPoint.id) {
            const closest = getClosestPointOnLineSegment(mouseDataPos, p1, p2);
            if (closest.distance < edgeClickThresholdData && closest.onSegmentStrict) {
                const finalAngleRad = Math.atan2(closest.y - startPoint.y, closest.x - startPoint.x) || 0;
                return { x: closest.x, y: closest.y, angle: finalAngleRad * (180 / Math.PI), distance: distance(startPoint, closest), snapped: true, gridSnapped: false, lengthSnapFactor: null, angleSnapFactor: null, angleTurn: normalizeAngleToPi(finalAngleRad, 0), gridToGridSquaredSum: null, gridInterval: null };
            }
        }
    }

    // 3. If Shift is NOT pressed, return the raw mouse position. No snapping.
    if (!shiftPressed) {
        const finalAngleRad = Math.atan2(mouseDataPos.y - startPoint.y, mouseDataPos.x - startPoint.x) || 0;
        return {
            x: mouseDataPos.x, y: mouseDataPos.y,
            angle: finalAngleRad * (180 / Math.PI),
            distance: distance(startPoint, mouseDataPos),
            snapped: false, gridSnapped: false, lengthSnapFactor: null, angleSnapFactor: null,
            angleTurn: normalizeAngleToPi(finalAngleRad - drawingContext.offsetAngleRad),
            gridToGridSquaredSum: null, gridInterval: null
        };
    }

    // 4. If Shift IS pressed, generate candidates for snapping (grid, combined angle/distance).
    const rawAngle = Math.atan2(mouseDataPos.y - startPoint.y, mouseDataPos.x - startPoint.x);
    const rawDist = distance(startPoint, mouseDataPos);

    // Determine a practical search extent for generating grid candidates to avoid excessive computation
    const canvasWidth = canvas.width / dpr;
    const canvasHeight = canvas.height / dpr;
    const topLeftData = screenToData({ x: 0, y: 0 });
    const bottomRightData = screenToData({ x: canvasWidth, y: canvasHeight });
    const maxVisibleDimData = Math.max(Math.abs(bottomRightData.x - topLeftData.x), Math.abs(topLeftData.y - bottomRightData.y));
    const searchExtentData = maxVisibleDimData * 2; 

    // --- Candidate Category A: Closest Grid Point ---
    let closestGridPoint = null;
    let minGridDistSq = Infinity;
    if (gridDisplayMode !== 'none' && lastGridState.interval1) {
        if (gridDisplayMode === 'polar') {
            const dominantRadialInterval = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
            if (dominantRadialInterval > 0) {
                const mouseAngleDeg = (Math.atan2(mouseDataPos.y, mouseDataPos.x) * 180 / Math.PI + 360) % 360;
                const mouseRadius = Math.hypot(mouseDataPos.x, mouseDataPos.y);
                const snappedRadius = Math.round(mouseRadius / dominantRadialInterval) * dominantRadialInterval;

                lastAngularGridState.forEach(level => {
                    if (level.alpha > 0.01 && level.angle > 0) {
                        const angularInterval = level.angle;
                        const snappedAngleDeg = Math.round(mouseAngleDeg / angularInterval) * angularInterval;
                        const snappedAngleRad = snappedAngleDeg * Math.PI / 180;
                        const pos = { x: snappedRadius * Math.cos(snappedAngleRad), y: snappedRadius * Math.sin(snappedAngleRad) };
                        const dist = distanceSq(mouseDataPos, pos);
                        if (dist < minGridDistSq) {
                            minGridDistSq = dist;
                            closestGridPoint = { pos: pos, isGridPoint: true, type: 'polar_grid_snap' };
                        }
                    }
                });
            }
        } else { // Rectilinear grid
            const dominantGridInterval = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
            if (dominantGridInterval > 0) {
                // Iterate through grid points within the generous search extent
                const startX = Math.floor((mouseDataPos.x - searchExtentData) / dominantGridInterval) * dominantGridInterval;
                const endX = Math.ceil((mouseDataPos.x + searchExtentData) / dominantGridInterval) * dominantGridInterval;
                const startY = Math.floor((mouseDataPos.y - searchExtentData) / dominantGridInterval) * dominantGridInterval;
                const endY = Math.ceil((mouseDataPos.y + searchExtentData) / dominantGridInterval) * dominantGridInterval;

                for (let x = startX; x <= endX; x += dominantGridInterval) {
                    for (let y = startY; y <= endY; y += dominantGridInterval) {
                        const pos = { x: x, y: y };
                        const dist = distanceSq(mouseDataPos, pos);
                        if (dist < minGridDistSq) {
                            minGridDistSq = dist;
                            closestGridPoint = { pos: pos, isGridPoint: true, type: 'rect_grid_snap' };
                        }
                    }
                }
            }
        }
    }
    if (closestGridPoint) {
        categorizedSnapCandidates.push(closestGridPoint);
    }

    // --- Candidate Category B: Closest Combined Angle and Distance Snap Point ---
    // This looks for an intersection of a snapped angle AND a snapped distance.
    let closestAngleDistanceSnap = null;
    let minAngleDistSnapSq = Infinity;

    const referenceAngleForSnapping = drawingContext.currentSegmentReferenceA_for_display;
    const baseUnitDistance = drawingContext.currentSegmentReferenceD;
    const symmetricalAngleFractions = new Set([0, ...NINETY_DEG_ANGLE_SNAP_FRACTIONS.flatMap(f => [f, -f])]);
    const sortedSymmetricalFractions = Array.from(symmetricalAngleFractions).sort((a, b) => a - b);
    const allSnapAngles = sortedSymmetricalFractions.map(f => ({ factor: f, angle: normalizeAngleToPi(drawingContext.offsetAngleRad + (f * referenceAngleForSnapping)), turn: normalizeAngleToPi(f * referenceAngleForSnapping) }));
    const allSnapDistances = [];
    for (let i = 0; i <= DRAW_SNAP_DISTANCE_FACTOR_LIMIT / DRAW_SNAP_DISTANCE_FACTOR_STEP; i++) {
        const factor = i * DRAW_SNAP_DISTANCE_FACTOR_STEP;
        allSnapDistances.push({ factor: factor, dist: factor * baseUnitDistance });
    }
    
    if (allSnapAngles.length > 0 && allSnapDistances.length > 0) {
        for (const angleData of allSnapAngles) {
            for (const distData of allSnapDistances) {
                const pos = { x: startPoint.x + distData.dist * Math.cos(angleData.angle), y: startPoint.y + distData.dist * Math.sin(angleData.angle) };
                const dist = distanceSq(mouseDataPos, pos);
                if (dist < minAngleDistSnapSq) {
                    minAngleDistSnapSq = dist;
                    closestAngleDistanceSnap = {
                        pos: pos,
                        type: 'angle_distance_snap',
                        lengthSnapFactor: distData.factor,
                        angleSnapFactor: angleData.factor,
                        angleTurn: angleData.turn
                    };
                }
            }
        }
    }
    if (closestAngleDistanceSnap) {
        categorizedSnapCandidates.push(closestAngleDistanceSnap);
    }
    
    // 5. Final Selection: Find the overall closest among the best candidates from each category.
    // This handles the priority: the mathematically closest candidate from grid OR combined angle/distance wins.
    if (categorizedSnapCandidates.length > 0) {
        const bestOverallCandidate = categorizedSnapCandidates.reduce((best, current) =>
            distanceSq(mouseDataPos, current.pos) < distanceSq(mouseDataPos, best.pos) ? current : best
        );

        const finalAngle = Math.atan2(bestOverallCandidate.pos.y - startPoint.y, bestOverallCandidate.pos.x - startPoint.x) || 0;
        const snappedDistanceOutput = parseFloat(distance(startPoint, bestOverallCandidate.pos).toFixed(10));

        let gridToGridSquaredSum = null;
        let finalGridInterval = null;
        // Calculate grid-to-grid properties if the best candidate is a grid point
        if (bestOverallCandidate.isGridPoint && gridDisplayMode !== 'polar') {
            const gridInterval = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
            const epsilon = gridInterval * GEOMETRY_CALCULATION_EPSILON;
            const startIsOnGridX = Math.abs(startPoint.x / gridInterval - Math.round(startPoint.x / gridInterval)) < epsilon;
            const startIsOnGridY = Math.abs(startPoint.y / gridInterval - Math.round(startPoint.y / gridInterval)) < epsilon;
            if (startIsOnGridX && startIsOnGridY) {
                const deltaX = bestOverallCandidate.pos.x - startPoint.x;
                const deltaY = bestOverallCandidate.pos.y - startPoint.y;
                const dx_grid = Math.round(deltaX / gridInterval);
                const dy_grid = Math.round(deltaY / gridInterval);
                gridToGridSquaredSum = dx_grid * dx_grid + dy_grid * dy_grid;
                finalGridInterval = gridInterval;
            }
        }

        return {
            x: parseFloat(bestOverallCandidate.pos.x.toFixed(10)),
            y: parseFloat(bestOverallCandidate.pos.y.toFixed(10)),
            angle: finalAngle * (180 / Math.PI),
            distance: snappedDistanceOutput,
            snapped: true,
            gridSnapped: !!bestOverallCandidate.isGridPoint, // Ensure gridSnapped flag is correctly set
            lengthSnapFactor: bestOverallCandidate.lengthSnapFactor || null,
            angleSnapFactor: bestOverallCandidate.angleSnapFactor || null,
            angleTurn: bestOverallCandidate.angleTurn ?? normalizeAngleToPi(finalAngle - drawingContext.offsetAngleRad),
            gridToGridSquaredSum: gridToGridSquaredSum,
            gridInterval: finalGridInterval,
        };
    }

    // 6. Fallback: If Shift is pressed but NO candidates were found in any category (e.g., no grid,
    //    no angle/distance rules apply, or zoomed too far out for candidates to be practical).
    //    Return the raw mouse position. This ensures the ghost is always visible.
    const finalAngleRad = Math.atan2(mouseDataPos.y - startPoint.y, mouseDataPos.x - startPoint.x) || 0;
    return {
        x: mouseDataPos.x, y: mouseDataPos.y,
        angle: finalAngleRad * (180 / Math.PI),
        distance: distance(startPoint, mouseDataPos),
        snapped: false, gridSnapped: false, lengthSnapFactor: null, angleSnapFactor: null,
        angleTurn: normalizeAngleToPi(finalAngleRad - drawingContext.offsetAngleRad),
        gridToGridSquaredSum: null, gridInterval: null,
    };
}

function getDragSnapPosition(dragOrigin, mouseDataPos) {
    const neighbors = findNeighbors(dragOrigin.id).map(id => allPoints.find(p => p.id === id)).filter(Boolean);
    const distanceSq = (p1, p2) => (p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2;
    const lineToSnapRadius = LINE_TO_SNAP_RADIUS_SCREEN / viewTransform.scale;
    const pointOnLineSnapRadius = POINT_ON_LINE_SNAP_RADIUS_SCREEN / viewTransform.scale;
    let bestBisector = null;
    let minDistToBisector = Infinity;
    let bestBisectorNeighbors = null;
    for (let i = 0; i < neighbors.length; i++) {
        for (let j = i + 1; j < neighbors.length; j++) {
            const p1 = neighbors[i];
            const p2 = neighbors[j];
            const midPoint = { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 };
            const perpVec = { x: -(p2.y - p1.y), y: p2.x - p1.x };
            if (Math.hypot(perpVec.x, perpVec.y) < GEOMETRY_CALCULATION_EPSILON) continue;
            const bisectorP1 = { x: midPoint.x - perpVec.x * 100000, y: midPoint.y - perpVec.y * 100000 };
            const bisectorP2 = { x: midPoint.x + perpVec.x * 100000, y: midPoint.y + perpVec.y * 100000 };
            const closestPointOnLine = getClosestPointOnLineSegment(mouseDataPos, bisectorP1, bisectorP2);
            if (closestPointOnLine.distance < minDistToBisector) {
                minDistToBisector = closestPointOnLine.distance;
                bestBisector = { p1: bisectorP1, p2: bisectorP2, projection: closestPointOnLine };
                bestBisectorNeighbors = [p1, p2];
            }
        }
    }
    if (bestBisector && minDistToBisector < lineToSnapRadius) {
        const secondOrderCandidates = [];
        const [p1, p2] = bestBisectorNeighbors;
        const midPoint = { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 };
        const d_half = distance(p1, midPoint);
        const perpVec = { x: -(p2.y - p1.y), y: p2.x - p1.x };
        const perpVecMag = Math.hypot(perpVec.x, perpVec.y);
        if (d_half > GEOMETRY_CALCULATION_EPSILON && perpVecMag > GEOMETRY_CALCULATION_EPSILON) {
            const normPerpVec = { x: perpVec.x / perpVecMag, y: perpVec.y / perpVecMag };
            const geometricSnapAnglesRad = NINETY_DEG_ANGLE_SNAP_FRACTIONS
                .map(f => f * (Math.PI / 2))
                .filter(angle => angle > GEOMETRY_CALCULATION_EPSILON && angle < Math.PI);
            geometricSnapAnglesRad.forEach(angleRad => {
                const tanHalfTheta = Math.tan(angleRad / 2);
                if (Math.abs(tanHalfTheta) > GEOMETRY_CALCULATION_EPSILON) {
                    const h = d_half / tanHalfTheta;
                    secondOrderCandidates.push({ x: midPoint.x + h * normPerpVec.x, y: midPoint.y + h * normPerpVec.y });
                }
            });
        }
        if (gridDisplayMode !== 'none') {
            const topLeftData = screenToData({ x: 0, y: 0 });
            const bottomRightData = screenToData({ x: canvas.width / dpr, y: canvas.height / dpr });
            const maxViewDim = Math.max(Math.abs(bottomRightData.x - topLeftData.x), Math.abs(topLeftData.y - bottomRightData.y));
            if (gridDisplayMode === 'polar') {
                const dominantRadialInterval = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
                for(let r = dominantRadialInterval; r < maxViewDim; r += dominantRadialInterval) {
                    secondOrderCandidates.push(...getLineCircleIntersection(bestBisector, { center: {x:0, y:0}, radius: r }));
                }
                lastAngularGridState.forEach(level => {
                    if (level.alpha > 0.01 && level.angle > 0) {
                        for (let angle = 0; angle < 360; angle += level.angle) {
                            const rad = angle * Math.PI / 180;
                            const rayLine = { p1: {x:0, y:0}, p2: {x: Math.cos(rad), y: Math.sin(rad)} };
                            const intersection = getLineLineIntersection(bestBisector, rayLine);
                            if(intersection) secondOrderCandidates.push(intersection);
                        }
                    }
                });
            } else {
                const dominantGridInterval = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
                const startX = Math.floor(topLeftData.x / dominantGridInterval) * dominantGridInterval;
                const endX = Math.ceil(bottomRightData.x / dominantGridInterval) * dominantGridInterval;
                const startY = Math.floor(bottomRightData.y / dominantGridInterval) * dominantGridInterval;
                const endY = Math.ceil(topLeftData.y / dominantGridInterval) * dominantGridInterval;
                for (let x = startX; x <= endX; x += dominantGridInterval) {
                    const intersection = getLineLineIntersection(bestBisector, { p1: { x: x, y: -100000 }, p2: { x: x, y: 100000 } });
                    if (intersection) secondOrderCandidates.push(intersection);
                }
                for (let y = startY; y <= endY; y += dominantGridInterval) {
                    const intersection = getLineLineIntersection(bestBisector, { p1: { x: -100000, y: y }, p2: { x: 100000, y: y } });
                    if (intersection) secondOrderCandidates.push(intersection);
                }
            }
        }
        if (secondOrderCandidates.length > 0) {
            const projectedPos = { x: bestBisector.projection.x, y: bestBisector.projection.y };
            const bestOnLineCandidate = secondOrderCandidates.reduce((best, current) => distanceSq(projectedPos, current) < distanceSq(projectedPos, best) ? current : best);
            if (distance(projectedPos, bestOnLineCandidate) < pointOnLineSnapRadius) {
                return { point: bestOnLineCandidate, snapped: true, constraints: null };
            }
        }
        return { point: { x: bestBisector.projection.x, y: bestBisector.projection.y }, snapped: true, constraints: null };
    }
    let allCandidates = [];
    if (gridDisplayMode !== 'none') {
        if(gridDisplayMode === 'polar') {
            const dominantRadialInterval = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
            if (dominantRadialInterval > 0) {
                const mouseAngleDeg = (Math.atan2(mouseDataPos.y, mouseDataPos.x) * 180/Math.PI + 360) % 360;
                const mouseRadius = Math.hypot(mouseDataPos.x, mouseDataPos.y);
                const snappedRadius = Math.round(mouseRadius / dominantRadialInterval) * dominantRadialInterval;
                lastAngularGridState.forEach(level => {
                    if (level.alpha > 0.01 && level.angle > 0) {
                        const angularInterval = level.angle;
                        const snappedAngleDeg = Math.round(mouseAngleDeg / angularInterval) * angularInterval;
                        const snappedAngleRad = snappedAngleDeg * Math.PI / 180;
                        allCandidates.push({x: snappedRadius * Math.cos(snappedAngleRad), y: snappedRadius * Math.sin(snappedAngleRad)});
                    }
                });
            }
        } else {
            const dominantGridInterval = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
            const baseGridX = Math.round(mouseDataPos.x / dominantGridInterval) * dominantGridInterval;
            const baseGridY = Math.round(mouseDataPos.y / dominantGridInterval) * dominantGridInterval;
            allCandidates.push({ x: baseGridX, y: baseGridY});
        }
    }
    for (const p of allPoints) {
        if (p.id !== dragOrigin.id && p.type === 'regular') {
            allCandidates.push({ x: p.x, y: p.y });
        }
    }
    if (gridDisplayMode !== 'polar') {
        const majorSnapAnglesRad = NINETY_DEG_ANGLE_SNAP_FRACTIONS.map(f => f * (Math.PI / 2)).filter(angle => angle > GEOMETRY_CALCULATION_EPSILON && angle < Math.PI);
        const majorSortedSnapDistances = DRAG_SNAP_GEOMETRIC_DISTANCE_FACTORS.map(f => f * DEFAULT_REFERENCE_DISTANCE);
        for (let i = 0; i < neighbors.length; i++) {
            for (let j = i + 1; j < neighbors.length; j++) {
                for (const d1 of majorSortedSnapDistances) {
                    for (const alpha of majorSnapAnglesRad) {
                        allCandidates.push(...solveForPoint(neighbors[i], neighbors[j], d1, alpha));
                    }
                }
            }
        }
    }
    if (allCandidates.length === 0) return { point: mouseDataPos, snapped: false };
    const bestCandidate = allCandidates.reduce((best, current) => distanceSq(mouseDataPos, current) < distanceSq(mouseDataPos, best) ? current : best);
    const snapStickinessRadius = SNAP_STICKINESS_RADIUS_SCREEN / viewTransform.scale;
    if (distance(mouseDataPos, bestCandidate) < snapStickinessRadius) {
        return { point: bestCandidate, snapped: true, constraints: { dist: bestCandidate.dist || null, angle: bestCandidate.angle || null } };
    }
    return { point: mouseDataPos, snapped: false };
}

function getLineCircleIntersection(line, circle) {
    const { p1, p2 } = line;
    const { center, radius } = circle;
    const d = { x: p2.x - p1.x, y: p2.y - p1.y };
    const f = { x: p1.x - center.x, y: p1.y - center.y };
    const a = d.x * d.x + d.y * d.y;
    const b = 2 * (f.x * d.x + f.y * d.y);
    const c = f.x * f.x + f.y * f.y - radius * radius;
    let discriminant = b * b - 4 * a * c;

    if (discriminant < 0) return [];

    discriminant = Math.sqrt(discriminant);
    const t1 = (-b - discriminant) / (2 * a);
    const t2 = (-b + discriminant) / (2 * a);
    
    return [
        { x: p1.x + t1 * d.x, y: p1.y + t1 * d.y },
        { x: p1.x + t2 * d.x, y: p1.y + t2 * d.y }
    ];
}

function getLineLineIntersection(line1, line2) {
    const p1 = line1.p1, p2 = line1.p2, p3 = line2.p1, p4 = line2.p2;
    const den = (p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);
    if (Math.abs(den) < 1e-9) return null;
    const t = ((p1.x - p3.x) * (p3.y - p4.y) - (p1.y - p3.y) * (p3.x - p4.x)) / den;
    const u = -((p1.x - p2.x) * (p1.y - p3.y) - (p1.y - p2.y) * (p1.x - p3.x)) / den;
    
    // We are interested in intersections on the infinite bisector line, so we don't check if t is between 0 and 1.
    // We only care that the intersection happens on the grid line segment, which u controls.
    if (u >= 0 && u <= 1) { 
        return { x: p1.x + t * (p2.x - p1.x), y: p1.y + t * (p2.y - p1.y) };
    }
    return null;
}


function drawDragFeedback(targetPointId, currentPointStates, isSnapping = false, excludedEdgeId = null) {
    const feedbackColor = isSnapping ? FEEDBACK_COLOR_SNAPPED : FEEDBACK_COLOR_DEFAULT;
    const katexFontSize = FEEDBACK_LABEL_FONT_SIZE;
    const ARC_RADIUS_SCREEN = FEEDBACK_ARC_RADIUS_SCREEN;
    const LABEL_OFFSET_DIST_SCREEN = FEEDBACK_DISTANCE_LABEL_OFFSET_SCREEN;

    const livePoints = new Map(currentPointStates.map(p => [p.id, { ...p }]));
    const getLivePoint = (id) => livePoints.get(id);

    const vertex = getLivePoint(targetPointId);
    if (!vertex) return;

    const neighbors = findNeighbors(vertex.id).map(getLivePoint).filter(Boolean);
    if (neighbors.length === 0) return;

    const gridInterval = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;

    const isPointOnGrid = (point, interval) => {
        if (!interval || interval <= 0) return false;
        const epsilon = interval * GEOMETRY_CALCULATION_EPSILON;
        const isOnGridX = Math.abs(point.x / interval - Math.round(point.x / interval)) < epsilon;
        const isOnGridY = Math.abs(point.y / interval - Math.round(point.y / interval)) < epsilon;
        return isOnGridX && isOnGridY;
    };

    const vertexScreen = dataToScreen(vertex);

    neighbors.forEach(neighbor => {
        const dist = distance(vertex, neighbor);
        if (dist < GEOMETRY_CALCULATION_EPSILON) return;

        const currentEdgeId = getEdgeId({ id1: vertex.id, id2: neighbor.id });

        if (currentEdgeId !== excludedEdgeId) {
            if (showDistances) {
                let distText;
                const areBothPointsOnGrid = gridInterval && isPointOnGrid(vertex, gridInterval) && isPointOnGrid(neighbor, gridInterval);
                if (areBothPointsOnGrid) {
                    const deltaX = vertex.x - neighbor.x;
                    const deltaY = vertex.y - neighbor.y;
                    const dx_grid = Math.round(deltaX / gridInterval);
                    const dy_grid = Math.round(deltaY / gridInterval);
                    const g2gSquaredSumForDisplay = dx_grid * dx_grid + dy_grid * dy_grid;
                    if (g2gSquaredSumForDisplay === 0) {
                        distText = '0';
                    } else {
                        const [coeff, radicand] = simplifySquareRoot(g2gSquaredSumForDisplay);
                        const finalCoeff = gridInterval * coeff;
                        const roundedFinalCoeff = parseFloat(finalCoeff.toFixed(10)); // Round to 10 decimal places for display
                        distText = formatSimplifiedRoot(roundedFinalCoeff, radicand);
                    }
                } else {
                    distText = formatNumber(dist, distanceSigFigs);
                }

                const neighborScreen = dataToScreen(neighbor);
                const edgeAngleScreen = Math.atan2(neighborScreen.y - vertexScreen.y, neighborScreen.x - vertexScreen.x);

                const midX = (vertexScreen.x + neighborScreen.x) / 2;
                const midY = (vertexScreen.y + neighborScreen.y) / 2;

                let textOffset = LABEL_OFFSET_DIST_SCREEN;

                const labelId = `drag-dist-${vertex.id}-${neighbor.id}`;

                if (Math.abs(Math.cos(edgeAngleScreen)) < VERTICAL_LINE_COS_THRESHOLD) {
                    const distanceTextX = midX + textOffset;
                    const distanceTextY = midY;
                    updateHtmlLabel({
                        id: labelId,
                        content: distText,
                        x: distanceTextX,
                        y: distanceTextY,
                        color: feedbackColor,
                        fontSize: katexFontSize,
                        options: {
                            textAlign: 'center',
                            textBaseline: 'middle',
                            rotation: 90
                        }
                    });
                } else {
                    let textPerpAngle = edgeAngleScreen - Math.PI / 2;
                    if (Math.sin(textPerpAngle) > 0) {
                        textPerpAngle += Math.PI;
                    }
                    const distanceTextX = midX + Math.cos(textPerpAngle) * textOffset;
                    const distanceTextY = midY + Math.sin(textPerpAngle) * textOffset;

                    let rotationDeg = edgeAngleScreen * (180 / Math.PI);
                    if (rotationDeg > 90 || rotationDeg < -90) {
                        rotationDeg += 180;
                    }

                    updateHtmlLabel({
                        id: labelId,
                        content: distText,
                        x: distanceTextX,
                        y: distanceTextY,
                        color: feedbackColor,
                        fontSize: katexFontSize,
                        options: {
                            textAlign: 'center',
                            textBaseline: 'middle',
                            rotation: rotationDeg
                        }
                    });
                }
            } else {
                labelsToKeepThisFrame.delete(`drag-dist-${vertex.id}-${neighbor.id}`);
            }
        }
    });

    if (showAngles && neighbors.length >= 2) {
        const sortedNeighbors = [...neighbors].sort((a, b) => {
            const angleA = Math.atan2(a.y - vertex.y, a.x - vertex.x);
            const angleB = Math.atan2(b.y - vertex.y, b.x - vertex.x);
            return angleA - angleB;
        });

        for (let i = 0; i < sortedNeighbors.length; i++) {
            const p1 = sortedNeighbors[i];
            const p2 = sortedNeighbors[(i + 1) % sortedNeighbors.length];
            const v1 = { x: p1.x - vertex.x, y: p1.y - vertex.y };
            const v2 = { x: p2.x - vertex.x, y: p2.y - vertex.y };
            const angle1_data = Math.atan2(v1.y, v1.x);
            const angle2_data = Math.atan2(v2.y, v2.x);
            let angleToDisplayRad = angle2_data - angle1_data;
            if (angleToDisplayRad < 0) {
                angleToDisplayRad += 2 * Math.PI;
            }
            if (angleToDisplayRad < GEOMETRY_CALCULATION_EPSILON) continue;
            const LABEL_RADIUS_SCREEN = ANGLE_LABEL_RADIUS_SCREEN;
            const bisectorAngle = angle1_data + (angleToDisplayRad / 2);
            ctx.save();
            ctx.strokeStyle = feedbackColor;
            ctx.lineWidth = FEEDBACK_LINE_VISUAL_WIDTH;
            ctx.beginPath();
            ctx.arc(vertexScreen.x, vertexScreen.y, ARC_RADIUS_SCREEN, -angle1_data, -angle2_data, false);
            ctx.stroke();
            ctx.restore();

            let angleText;
            if (angleDisplayMode === 'degrees') {
                angleText = `${formatNumber(angleToDisplayRad * (180 / Math.PI), angleSigFigs)}^{\\circ}`;
            } else if (angleDisplayMode === 'radians') {
                if (currentShiftPressed) {
                    angleText = formatFraction(angleToDisplayRad / Math.PI, 0.001, 6) + '\\pi';
                    if (angleText.startsWith("1\\pi")) angleText = "\\pi";
                    if (angleText.startsWith("-1\\pi")) angleText = "-\\pi";
                    if (angleText === "0\\pi") angleText = "0";
                } else {
                    angleText = formatNumber(angleToDisplayRad, angleSigFigs);
                }
            }

            if (angleText) {
                const angleLabelDataPos = {
                    x: vertex.x + (LABEL_RADIUS_SCREEN / viewTransform.scale) * Math.cos(bisectorAngle),
                    y: vertex.y + (LABEL_RADIUS_SCREEN / viewTransform.scale) * Math.sin(bisectorAngle)
                };
                const angleLabelScreenPos = dataToScreen(angleLabelDataPos);
                const labelId = `drag-angle-${vertex.id}-${p1.id}-${p2.id}`;
                updateHtmlLabel({
                    id: labelId,
                    content: angleText,
                    x: angleLabelScreenPos.x,
                    y: angleLabelScreenPos.y,
                    color: feedbackColor,
                    fontSize: katexFontSize,
                    options: { textAlign: 'center', textBaseline: 'middle' }
                });
            } else {
                labelsToKeepThisFrame.delete(`drag-angle-${vertex.id}-${p1.id}-${p2.id}`);
            }
        }
    } else {
        neighbors.forEach(neighbor1 => {
            neighbors.forEach(neighbor2 => {
                if (neighbor1.id !== neighbor2.id) {
                    labelsToKeepThisFrame.delete(`drag-angle-${vertex.id}-${neighbor1.id}-${neighbor2.id}`);
                }
            });
        });
    }
}

function prepareReferenceElementsTexts(context, shiftPressed) {
    const screenPixelThreshold = REF_TEXT_SCREEN_PIXEL_THRESHOLD;
    const dataThreshold = screenPixelThreshold / viewTransform.scale;
    const angleThreshold = GEOMETRY_CALCULATION_EPSILON;

    let previewDistance = -1;
    if (context.frozen_Origin_Data_to_display) {
        const startPointData = context.frozen_Origin_Data_to_display;
        const mouseDataPos = screenToData(mousePos);
        previewDistance = distance(startPointData, mouseDataPos);
    }

    if ((!showAngles && !showDistances) || !context.frozen_Origin_Data_to_display || previewDistance < dataThreshold) {
        labelsToKeepThisFrame.delete('ref-dist');
        labelsToKeepThisFrame.delete('ref-angle');
        return;
    }

    const refElementColor = FROZEN_REFERENCE_COLOR;
    const katexFontSize = REF_TEXT_KATEX_FONT_SIZE;

    const startPointData = context.frozen_Origin_Data_to_display;
    const turnAngleData = context.displayAngleA_valueRad_for_A_equals_label;
    const baseAngleData = context.frozen_A_baseRad_to_display !== null ? context.frozen_A_baseRad_to_display : 0;
    const distanceData = context.frozen_D_du_to_display;
    const frozenG2GSquaredSum = context.frozen_D_g2g_to_display ? context.frozen_D_g2g_to_display.g2gSquaredSum : null;
    const frozenG2GInterval = context.frozen_D_g2g_to_display ? context.frozen_D_g2g_to_display.interval : null;

    if (!startPointData) {
        labelsToKeepThisFrame.delete('ref-dist');
        labelsToKeepThisFrame.delete('ref-angle');
        return;
    }

    const absoluteAngleForRefLine = baseAngleData + turnAngleData;
    const endPointData = {
        x: startPointData.x + distanceData * Math.cos(absoluteAngleForRefLine),
        y: startPointData.y + distanceData * Math.sin(absoluteAngleForRefLine)
    };

    const startPointScreen = dataToScreen(startPointData);
    const endPointScreen = dataToScreen(endPointData);

    if (showDistances && distanceData !== null && distanceData > dataThreshold && frozenReference_D_du !== null) {
        let distanceText = '';

        if (frozenG2GSquaredSum !== null && frozenG2GSquaredSum > 0 && frozenG2GInterval) {
            const [coeff, radicand] = simplifySquareRoot(frozenG2GSquaredSum);
            const finalCoeff = frozenG2GInterval * coeff;
            const roundedFinalCoeff = parseFloat(finalCoeff.toFixed(10)); // Round to 10 decimal places for display
            distanceText = `\\delta = ${formatSimplifiedRoot(roundedFinalCoeff, radicand)}`;
        } else {
            const platonicValue = distanceData / DEFAULT_REFERENCE_DISTANCE;
            distanceText = `\\delta = ${formatNumber(platonicValue, distanceSigFigs)}`;
        }

        const edgeAngleScreen = Math.atan2(endPointScreen.y - startPointScreen.y, endPointScreen.x - startPointScreen.x);
        const midX_screen = (startPointScreen.x + endPointScreen.x) / 2;
        const midY_screen = (startPointScreen.y + endPointScreen.y) / 2;
        const textOffset = REF_TEXT_DISTANCE_LABEL_OFFSET_SCREEN;

        let rotationDeg = edgeAngleScreen * (180 / Math.PI);
        if (rotationDeg > 90 || rotationDeg < -90) {
            rotationDeg += 180;
        }

        let textPerpAngle = edgeAngleScreen - Math.PI / 2;
        if (Math.sin(textPerpAngle) > 0) {
            textPerpAngle += Math.PI;
        }
        const textDistLabelX_D = midX_screen + Math.cos(textPerpAngle) * textOffset;
        const textDistLabelY_D = midY_screen + Math.sin(textPerpAngle) * textOffset;

        updateHtmlLabel({
            id: 'ref-dist',
            content: distanceText,
            x: textDistLabelX_D,
            y: textDistLabelY_D,
            color: refElementColor,
            fontSize: katexFontSize,
            options: {
                textAlign: 'center',
                textBaseline: 'middle',
                rotation: rotationDeg
            }
        });
    } else {
        labelsToKeepThisFrame.delete('ref-dist');
    }

    if (showAngles && turnAngleData !== null && Math.abs(turnAngleData) > angleThreshold) {
        const startAngleCanvas = -baseAngleData;
        const endAngleCanvas = -(baseAngleData + turnAngleData);

        const sumCos = Math.cos(startAngleCanvas) + Math.cos(endAngleCanvas);
        const sumSin = Math.sin(startAngleCanvas) + Math.sin(endAngleCanvas);
        let bisectorCanvasAngle = Math.atan2(sumSin, sumCos);
        const angleLabelOffsetDistance = REF_TEXT_ANGLE_LABEL_OFFSET_SCREEN;

        const textAngleLabelX_A = startPointScreen.x + Math.cos(bisectorCanvasAngle) * angleLabelOffsetDistance;
        const textAngleLabelY_A = startPointScreen.y + Math.sin(bisectorCanvasAngle) * angleLabelOffsetDistance;

        let aKatexText = '';
        if (angleDisplayMode === 'degrees') {
            let aValueDeg = normalizeAngleToPi(turnAngleData) * (180 / Math.PI);
            aKatexText = `\\theta = ${formatNumber(aValueDeg, angleSigFigs)}^{\\circ}`;
        } else if (angleDisplayMode === 'radians') {
            let aValueRad = normalizeAngleToPi(turnAngleData);
            aKatexText = `\\theta = ${formatFraction(aValueRad / Math.PI, 0.001, 6)}\\pi`;
            if (aKatexText === "\\theta = 1\\pi") aKatexText = "\\pi";
            if (aKatexText === "-1\\pi") aKatexText = "-\\pi";
            if (aKatexText === "0\\pi") aKatexText = "0";
        }

        updateHtmlLabel({
            id: 'ref-angle',
            content: aKatexText,
            x: textAngleLabelX_A,
            y: textAngleLabelY_A,
            color: refElementColor,
            fontSize: katexFontSize,
            options: { textAlign: 'center', textBaseline: 'middle' }
        });
    } else {
        labelsToKeepThisFrame.delete('ref-angle');
    }
}

function initializeCanvasUI() {
    canvasUI.toolbarButton = {
        id: "toolbar-button",
        x: UI_BUTTON_PADDING,
        y: UI_BUTTON_PADDING,
        width: 36,
        height: 30,
        type: "menuButton"
    };
}

const canvasUI = {
    toolbarButton: null,
    mainToolbar: null,
    colorToolButton: null,
    colorSwatches: [],
    addColorButton: null,
    transformToolButton: null, // Ensure this exists if it doesn't already
    transformIcons: [],      // Ensure this exists if it doesn't already
    // NEW UI elements
    displayToolButton: null,
    displayIcons: []
};

function buildMainToolbarUI() {
    const canvasHeight = canvas.height / dpr;
    canvasUI.mainToolbar = {
        id: "main-toolbar-bg",
        x: 0,
        y: 0,
        width: UI_TOOLBAR_WIDTH,
        height: canvasHeight,
        type: "toolbar"
    };

    canvasUI.colorToolButton = {
        id: "color-tool-button",
        type: "toolButton",
        x: UI_BUTTON_PADDING,
        y: canvasUI.toolbarButton.y + canvasUI.toolbarButton.height + 20,
        width: UI_TOOLBAR_WIDTH - (2 * UI_BUTTON_PADDING),
        height: 40,
    };
    
    canvasUI.transformToolButton = {
        id: "transform-tool-button",
        type: "toolButton",
        x: UI_BUTTON_PADDING,
        y: canvasUI.colorToolButton.y + canvasUI.colorToolButton.height + UI_BUTTON_PADDING,
        width: UI_TOOLBAR_WIDTH - (2 * UI_BUTTON_PADDING),
        height: 40,
    };

    canvasUI.displayToolButton = {
        id: "display-tool-button",
        type: "toolButton",
        x: UI_BUTTON_PADDING,
        y: canvasUI.transformToolButton.y + canvasUI.transformToolButton.height + UI_BUTTON_PADDING,
        width: UI_TOOLBAR_WIDTH - (2 * UI_BUTTON_PADDING),
        height: 40,
    };
}

function buildDisplayPanelUI() {
    canvasUI.displayIcons = [];
    if (!canvasUI.displayToolButton) return;

    const panelX = UI_TOOLBAR_WIDTH + UI_BUTTON_PADDING;
    const iconY = canvasUI.displayToolButton.y;
    const iconSize = 40;
    const iconPadding = 15;

    const iconGroups = ['coords', 'grid', 'angles', 'distances'];

    iconGroups.forEach((group, index) => {
        canvasUI.displayIcons.push({
            id: `display-icon-${group}`,
            group: group,
            x: panelX + index * (iconSize + iconPadding),
            y: iconY,
            width: iconSize,
            height: iconSize
        });
    });
}

function buildTransformPanelUI() {
    canvasUI.transformIcons = [];
    const panelX = UI_TOOLBAR_WIDTH + UI_BUTTON_PADDING;
    const iconY = canvasUI.transformToolButton.y;
    const iconSize = 30;
    const iconPadding = 15;
    const transformTypes = ['center_rotate_scale', 'center_rotate_only', 'center_scale_only'];

    transformTypes.forEach((type, index) => {
        canvasUI.transformIcons.push({
            id: `transform-icon-${type}`,
            type: type,
            x: panelX + index * (iconSize + iconPadding),
            y: iconY + 5, // Align vertically with the T button
            width: iconSize,
            height: iconSize
        });
    });
}

function buildColorPaletteUI() {
    canvasUI.colorSwatches = [];
    // This is the corrected line: The Y position is now based on the color tool button
    const paletteY = canvasUI.colorToolButton.y;

    const removeBtnX = UI_TOOLBAR_WIDTH + UI_BUTTON_PADDING;
    canvasUI.removeColorButton = {
        id: "remove-color-button",
        type: "button",
        x: removeBtnX,
        y: paletteY + 5, // Add a small offset to center it with the button
        width: UI_SWATCH_SIZE,
        height: UI_SWATCH_SIZE,
    };

    const swatchesX = removeBtnX + UI_SWATCH_SIZE + UI_BUTTON_PADDING;
    recentColors.forEach((color, index) => {
        canvasUI.colorSwatches.push({
            id: `swatch-${color}-${index}`,
            type: "colorSwatch",
            x: swatchesX + index * (UI_SWATCH_SIZE + UI_BUTTON_PADDING),
            y: paletteY + 5, // Add a small offset to center it with the button
            width: UI_SWATCH_SIZE,
            height: UI_SWATCH_SIZE,
            index: index,
            color: color
        });
    });

    const addButtonX = swatchesX + recentColors.length * (UI_SWATCH_SIZE + UI_BUTTON_PADDING);
    canvasUI.addColorButton = {
        id: "add-color-button",
        type: "button",
        x: addButtonX,
        y: paletteY + 5, // Add a small offset to center it with the button
        width: UI_SWATCH_SIZE,
        height: UI_SWATCH_SIZE,
    };
}

function drawDisplayIcon(ctx, icon) {
    let isSelected = false;
    switch (icon.group) {
        case 'coords':
            isSelected = coordsDisplayMode !== 'none';
            break;
        case 'grid':
            isSelected = gridDisplayMode !== 'none';
            break;
        case 'angles':
            isSelected = angleDisplayMode !== 'none';
            break;
        case 'distances':
            isSelected = distanceDisplayMode === 'on';
            break;
    }

    const rect = { x: icon.x, y: icon.y, width: icon.width, height: icon.height };

    // No extra fill or stroke logic for these icons.
    // Their selected state is now implicitly handled by their internal drawing.
    
    switch (icon.group) {
        case 'coords':
            drawCoordsIcon(ctx, rect, coordsDisplayMode, isSelected);
            break;
        case 'grid':
            drawGridIcon(ctx, rect, gridDisplayMode, isSelected);
            break;
        case 'angles':
            drawAngleIcon(ctx, rect, angleDisplayMode, isSelected);
            break;
        case 'distances':
            drawDistanceIcon(ctx, rect, distanceDisplayMode, isSelected);
            break;
    }
}

function drawCoordsIcon(ctx, rect, mode, isSelected) {
    const colorStrong = isSelected ? '#F9FAFB' : '#9CA3AF';
    const center = { x: rect.x + rect.width / 2, y: rect.y + rect.height / 2 };

    ctx.save();
    ctx.translate(center.x, center.y);
    const scale = rect.width / 32;
    ctx.scale(scale, scale);
    ctx.translate(-16, -16);

    const x_offset = 1; // The amount to shift everything right

    // Common elements: Axes
    ctx.strokeStyle = colorStrong;
    ctx.lineWidth = 1.5;
    ctx.lineCap = 'round';
    ctx.beginPath();
    ctx.moveTo(2 + x_offset, 30); ctx.lineTo(30 + x_offset, 30); // X-axis (bottom)
    ctx.moveTo(2 + x_offset, 30); ctx.lineTo(2 + x_offset, 2);   // Y-axis (left)
    ctx.stroke();

    // Mode-specific elements
    ctx.fillStyle = colorStrong;

    const point = { x: 16 + x_offset, y: 16 };
    let labelPos = { x: 17 + x_offset, y: 8 };

    let label = '';
    switch (mode) {
        case 'regular':
            ctx.setLineDash([2, 2]);
            ctx.beginPath();
            ctx.moveTo(point.x, point.y); ctx.lineTo(point.x, 30);
            ctx.moveTo(point.x, point.y); ctx.lineTo(2 + x_offset, point.y);
            ctx.stroke();
            ctx.setLineDash([]);
            ctx.beginPath();
            ctx.arc(point.x, point.y, 1.5, 0, 2 * Math.PI);
            ctx.fill();
            label = '(x,y)';
            break;
        case 'complex':
            ctx.setLineDash([2, 2]);
            ctx.beginPath();
            ctx.moveTo(2 + x_offset, 30); ctx.lineTo(point.x, point.y);
            ctx.stroke();
            ctx.setLineDash([]);
            ctx.beginPath();
            ctx.arc(point.x, point.y, 1.5, 0, 2 * Math.PI);
            ctx.fill();
            label = 'x+iy';
            break;
        case 'polar':
            ctx.setLineDash([2, 2]);
            ctx.beginPath();
            ctx.moveTo(2 + x_offset, 30); ctx.lineTo(point.x, point.y);
            ctx.stroke();
            ctx.beginPath();
            ctx.arc(2 + x_offset, 30, 8, -Math.atan2(30 - point.y, point.x - (2 + x_offset)), 0);
            ctx.stroke();
            ctx.setLineDash([]);
            ctx.beginPath();
            ctx.arc(point.x, point.y, 1.5, 0, 2 * Math.PI);
            ctx.fill();
            label = '(r,\\theta)';
            break;
        case 'none':
            break;
    }
    ctx.restore();

    if (label) {
        const labelId = 'icon-label-coords';
        updateHtmlLabel({
            id: labelId,
            content: label,
            x: center.x + (labelPos.x - 16) * scale,
            y: center.y + (labelPos.y - 16) * scale,
            color: isSelected ? '#E0F2FE' : '#D1D5DB',
            fontSize: 10,
            options: { textAlign: 'center', textBaseline: 'middle' }
        });
        labelsToKeepThisFrame.add(labelId);
    }
}

function drawAngleIcon(ctx, rect, mode, isSelected) {
    const colorStrong = isSelected ? '#F9FAFB' : '#9CA3AF';
    const center = { x: rect.x + rect.width / 2, y: rect.y + rect.height / 2 };

    ctx.save();
    ctx.translate(center.x, center.y);
    const scale = rect.width / 32;
    ctx.scale(scale, scale);
    ctx.translate(-16, -16);

    ctx.strokeStyle = colorStrong;
    ctx.lineWidth = 1.5;

    const p1 = { x: 28, y: 30 };
    const p2 = { x: 4, y: 30 };
    const p3 = { x: 16, y: 8 };
    ctx.beginPath();
    ctx.moveTo(p1.x, p1.y);
    ctx.lineTo(p2.x, p2.y);
    ctx.lineTo(p3.x, p3.y);
    ctx.stroke();

    let label = '';
    // FIXED: Label moved slightly to the right for better visual balance
    let labelPos = { x: 20, y: 22 };

    if (mode !== 'none') {
        ctx.beginPath();
        const angle = Math.atan2(p3.y - p2.y, p3.x - p2.x);
        ctx.arc(p2.x, p2.y, 8, angle, 0);
        ctx.stroke();
        if (mode === 'degrees') {
            label = '60^\\circ';
        } else if (mode === 'radians') {
            label = '\\pi/3';
        }
    }
    ctx.restore();

    if (label) {
        const labelId = 'icon-label-angles';
        updateHtmlLabel({
            id: labelId,
            content: label,
            x: center.x + (labelPos.x - 16) * scale,
            y: center.y + (labelPos.y - 16) * scale,
            color: isSelected ? '#E0F2FE' : '#D1D5DB',
            fontSize: 10,
            options: { textAlign: 'center', textBaseline: 'middle' }
        });
        labelsToKeepThisFrame.add(labelId);
    }
}

function drawDistanceIcon(ctx, rect, mode, isSelected) {
    const colorStrong = isSelected ? '#F9FAFB' : '#9CA3AF';
    const center = { x: rect.x + rect.width / 2, y: rect.y + rect.height / 2 };

    ctx.save();
    ctx.translate(center.x, center.y);
    // Use the standard 32x32 viewbox for alignment
    const scale = rect.width / 32;
    ctx.scale(scale, scale);
    ctx.translate(-16, -16);

    ctx.strokeStyle = colorStrong;
    ctx.lineWidth = 1.5;

    // Line, now at y=30 to align with other icons
    ctx.beginPath();
    ctx.moveTo(2, 30);
    ctx.lineTo(30, 30);
    ctx.stroke();

    let label = '';
    // Position label above the line
    let labelPos = { x: 16, y: 22 };

    if (mode === 'on') {
        label = '3.14';
    }

    ctx.restore();
    if (label) {
        const labelId = 'icon-label-distances';
        updateHtmlLabel({
            id: labelId,
            content: label,
            x: center.x + (labelPos.x - 16) * scale,
            y: center.y + (labelPos.y - 16) * scale,
            color: isSelected ? '#E0F2FE' : '#D1D5DB',
            fontSize: 12,
            options: { textAlign: 'center', textBaseline: 'middle' }
        });
        labelsToKeepThisFrame.add(labelId);
    }
}

function createColorWheelIcon(size) {
    const tempCanvas = document.createElement('canvas');
    tempCanvas.width = size * dpr;
    tempCanvas.height = size * dpr;
    const tempCtx = tempCanvas.getContext('2d');
    const imageData = tempCtx.createImageData(tempCanvas.width, tempCanvas.height);
    const pixels = imageData.data;

    const centerX = tempCanvas.width / 2;
    const centerY = tempCanvas.height / 2;
    const radius = tempCanvas.width / 2;

    for (let y = 0; y < tempCanvas.height; y++) {
        for (let x = 0; x < tempCanvas.width; x++) {
            const i = (y * tempCanvas.width + x) * 4;
            const dx = x - centerX;
            const dy = y - centerY;
            const dist = Math.sqrt(dx * dx + dy * dy);

            if (dist > radius) continue;

            const hue = (Math.atan2(dy, dx) * 180 / Math.PI + 360) % 360;
            const saturation = 100; // Saturation is now always 100%
            const lightness = 50;

            let alpha;
            const fadeStartRadius = radius * 0.75;

            if (dist < fadeStartRadius) {
                alpha = 1.0; // Opaque inside 75% of the radius
            } else {
                // Smoothly fade from opaque to transparent on the outer edge
                const fadeDistance = radius - fadeStartRadius;
                alpha = 1.0 - ((dist - fadeStartRadius) / fadeDistance);
            }

            const [R, G, B] = hslToRgb(hue / 360, saturation / 100, lightness / 100);

            pixels[i] = R;
            pixels[i + 1] = G;
            pixels[i + 2] = B;
            pixels[i + 3] = Math.round(Math.max(0, alpha) * 255);
        }
    }

    tempCtx.putImageData(imageData, 0, 0);
    return tempCanvas;
}

function drawUITransformSymbol(ctx, icon) {
    const screenPos = { x: icon.x + icon.width / 2, y: icon.y + icon.height / 2 };
    const radius = icon.width / 2;

    ctx.strokeStyle = 'white';
    ctx.setLineDash([]);
    ctx.lineWidth = 2;

    if (icon.type === 'center_rotate_scale') {
        ctx.beginPath();
        ctx.arc(screenPos.x, screenPos.y, radius, 0, 2 * Math.PI);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(screenPos.x - radius, screenPos.y);
        ctx.lineTo(screenPos.x + radius, screenPos.y);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(screenPos.x, screenPos.y - radius);
        ctx.lineTo(screenPos.x, screenPos.y + radius);
        ctx.stroke();
    } else if (icon.type === 'center_rotate_only') {
        ctx.beginPath();
        ctx.arc(screenPos.x, screenPos.y, radius, 0, 2 * Math.PI);
        ctx.stroke();
    } else if (icon.type === 'center_scale_only') {
        ctx.beginPath();
        ctx.moveTo(screenPos.x - radius, screenPos.y);
        ctx.lineTo(screenPos.x + radius, screenPos.y);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(screenPos.x, screenPos.y - radius);
        ctx.lineTo(screenPos.x, screenPos.y + radius);
        ctx.stroke();
    }
}

function drawCanvasUI(ctx) {
    ctx.save();
    ctx.resetTransform();
    ctx.scale(dpr, dpr);

    const btn = canvasUI.toolbarButton;
    ctx.strokeStyle = "rgba(255, 255, 255, 0.8)";
    ctx.lineWidth = 3;
    ctx.beginPath();
    for (let i = 0; i < 3; i++) {
        const lineY = btn.y + 5 + i * 10;
        ctx.moveTo(btn.x + 4, lineY);
        ctx.lineTo(btn.x + btn.width - 4, lineY);
    }
    ctx.stroke();

    if (isToolbarExpanded) {
        const ctb = canvasUI.colorToolButton;
        if (ctb) {
            if (!colorWheelIcon) {
                colorWheelIcon = createColorWheelIcon(ctb.width);
            }
            ctx.drawImage(colorWheelIcon, ctb.x, ctb.y, ctb.width, ctb.height);
            // FIX: Removed the highlight rectangle that was drawn when isColorPaletteExpanded was true.
        }

        const ttb = canvasUI.transformToolButton;
        if (ttb) {
            // FIX: The label color is now always white, regardless of panel state.
            const ttbLabelColor = "white";
            updateHtmlLabel({
                id: 'transform-tool-label',
                content: 'T',
                x: ttb.x + ttb.width / 2,
                y: ttb.y + ttb.height / 2,
                color: ttbLabelColor,
                fontSize: 24,
                options: { textAlign: 'center', textBaseline: 'middle' }
            });
            labelsToKeepThisFrame.add('transform-tool-label');
        }

        const dtb = canvasUI.displayToolButton;
        if (dtb) {
            const displayButtonColor = "rgba(255, 255, 255, 0.8)";
            ctx.strokeStyle = displayButtonColor;
            ctx.fillStyle = displayButtonColor;
            ctx.lineWidth = 2;
            const barWidth = dtb.width - 12;
            for (let i = 0; i < 3; i++) {
                const y = dtb.y + 10 + i * 10;
                ctx.beginPath();
                ctx.moveTo(dtb.x + 6, y);
                ctx.lineTo(dtb.x + 6 + barWidth, y);
                ctx.stroke();
                ctx.beginPath();
                ctx.arc(dtb.x + 6 + barWidth * (i / 2), y, 3, 0, 2 * Math.PI);
                ctx.fill();
            }
        }
    }

    if (!isToolbarExpanded) {
        labelsToKeepThisFrame.delete('transform-tool-label');
    }

    if (isColorPaletteExpanded) {
        const removeBtn = canvasUI.removeColorButton;
        if (removeBtn) {
            ctx.strokeStyle = "rgba(255, 255, 255, 0.8)";
            ctx.lineWidth = 2;
            ctx.strokeRect(removeBtn.x, removeBtn.y, removeBtn.width, removeBtn.height);
            ctx.beginPath();
            ctx.moveTo(removeBtn.x + 7, removeBtn.y + removeBtn.height / 2);
            ctx.lineTo(removeBtn.x + removeBtn.width - 7, removeBtn.y + removeBtn.height / 2);
            ctx.stroke();
        }
        canvasUI.colorSwatches.forEach((swatch, index) => {
            ctx.fillStyle = swatch.color;
            ctx.fillRect(swatch.x, swatch.y, swatch.width, swatch.height);
            if (index === selectedSwatchIndex) {
                ctx.strokeStyle = "#00ffff";
                ctx.lineWidth = 3;
                ctx.strokeRect(swatch.x - 1, swatch.y - 1, swatch.width + 2, swatch.height + 2);
            }
        });
        const addBtn = canvasUI.addColorButton;
        if (addBtn) {
            ctx.strokeStyle = "rgba(255, 255, 255, 0.8)";
            ctx.lineWidth = 2;
            ctx.strokeRect(addBtn.x, addBtn.y, addBtn.width, addBtn.height);
            ctx.beginPath();
            ctx.moveTo(addBtn.x + addBtn.width / 2, addBtn.y + 7);
            ctx.lineTo(addBtn.x + addBtn.width / 2, addBtn.y + addBtn.height - 7);
            ctx.moveTo(addBtn.x + 7, addBtn.y + addBtn.height / 2);
            ctx.lineTo(addBtn.x + addBtn.width - 7, addBtn.y + addBtn.height / 2);
            ctx.stroke();
        }
    }

    if (isTransformPanelExpanded) {
        canvasUI.transformIcons.forEach(icon => {
            drawUITransformSymbol(ctx, icon);
        });
    }

    if (isDisplayPanelExpanded) {
        canvasUI.displayIcons.forEach(icon => {
            drawDisplayIcon(ctx, icon);
        });
    }

    if (isPlacingTransform) {
        const finalDrawPos = placingSnapPos || mousePos;
        const ghostIcon = {
            type: placingTransformType,
            x: finalDrawPos.x - 15,
            y: finalDrawPos.y - 15,
            width: 30,
            height: 30
        };
        drawUITransformSymbol(ctx, ghostIcon);
    }

    ctx.restore();
}

function handleCanvasUIClick(screenPos) {
    const btn = canvasUI.toolbarButton;
    if (screenPos.x >= btn.x && screenPos.x <= btn.x + btn.width &&
        screenPos.y >= btn.y && screenPos.y <= btn.y + btn.height) {
        isToolbarExpanded = !isToolbarExpanded;
        if (isToolbarExpanded) {
            buildMainToolbarUI();
        } else {
            isColorPaletteExpanded = false;
            isTransformPanelExpanded = false;
            isDisplayPanelExpanded = false;
            selectedSwatchIndex = null;
        }
        return true;
    }

    if (isToolbarExpanded) {
        const ctb = canvasUI.colorToolButton;
        if (ctb && screenPos.x >= ctb.x && screenPos.x <= ctb.x + ctb.width &&
            screenPos.y >= ctb.y && screenPos.y <= ctb.y + ctb.height) {
            isColorPaletteExpanded = !isColorPaletteExpanded;
            if (isColorPaletteExpanded) {
                buildColorPaletteUI();
                const currentIndex = recentColors.indexOf(currentColor);
                selectedSwatchIndex = (currentIndex > -1) ? currentIndex : null;
            } else {
                selectedSwatchIndex = null;
            }
            return true;
        }

        const ttb = canvasUI.transformToolButton;
        if (ttb && screenPos.x >= ttb.x && screenPos.x <= ttb.x + ttb.width &&
            screenPos.y >= ttb.y && screenPos.y <= ttb.y + ttb.height) {
            isTransformPanelExpanded = !isTransformPanelExpanded;
            if (isTransformPanelExpanded) buildTransformPanelUI();
            return true;
        }

        const dtb = canvasUI.displayToolButton;
        if (dtb && screenPos.x >= dtb.x && screenPos.x <= dtb.x + dtb.width &&
            screenPos.y >= dtb.y && screenPos.y <= dtb.y + dtb.height) {
            isDisplayPanelExpanded = !isDisplayPanelExpanded;
            if (isDisplayPanelExpanded) buildDisplayPanelUI();
            return true;
        }
    }

    if (isColorPaletteExpanded) {
        for (const swatch of canvasUI.colorSwatches) {
            if (screenPos.x >= swatch.x && screenPos.x <= swatch.x + swatch.width &&
                screenPos.y >= swatch.y && screenPos.y <= swatch.y + swatch.height) {
                setCurrentColor(swatch.color);
                selectedSwatchIndex = swatch.index;
                return true;
            }
        }
        const removeBtn = canvasUI.removeColorButton;
        if (removeBtn && screenPos.x >= removeBtn.x && screenPos.x <= removeBtn.x + removeBtn.width &&
            screenPos.y >= removeBtn.y && screenPos.y <= removeBtn.y + removeBtn.height) {
            if (selectedSwatchIndex === null && recentColors.length > 0) {
                selectedSwatchIndex = 0;
            }
            if (selectedSwatchIndex !== null) {
                recentColors.splice(selectedSwatchIndex, 1);
                if (recentColors.length === 0) {
                    selectedSwatchIndex = null;
                } else {
                    selectedSwatchIndex = Math.min(selectedSwatchIndex, recentColors.length - 1);
                }
                if (selectedSwatchIndex !== null) {
                    setCurrentColor(recentColors[selectedSwatchIndex]);
                }
                buildColorPaletteUI();
            }
            return true;
        }
        const addBtn = canvasUI.addColorButton;
        if (addBtn && screenPos.x >= addBtn.x && screenPos.x <= addBtn.x + addBtn.width &&
            screenPos.y >= addBtn.y && screenPos.y <= addBtn.y + addBtn.height) {
            setTimeout(() => {
                colorPicker.click();
            }, 0);
            return true;
        }
    }

    if (isTransformPanelExpanded) {
        for (const icon of canvasUI.transformIcons) {
            if (screenPos.x >= icon.x && screenPos.x <= icon.x + icon.width &&
                screenPos.y >= icon.y && screenPos.y <= icon.y + icon.height) {
                isPlacingTransform = true;
                placingTransformType = icon.type;
                return true;
            }
        }
    }

    if (isDisplayPanelExpanded) {
        for (const icon of canvasUI.displayIcons) {
            if (screenPos.x >= icon.x && screenPos.x <= icon.x + icon.width &&
                screenPos.y >= icon.y && screenPos.y <= icon.y + icon.height) {

                switch (icon.group) {
                    case 'coords':
                        const coordsModes = ['none', 'regular', 'complex', 'polar'];
                        coordsDisplayMode = coordsModes[(coordsModes.indexOf(coordsDisplayMode) + 1) % coordsModes.length];
                        break;
                    case 'grid':
                        const gridModes = ['lines', 'points', 'polar', 'none'];
                        gridDisplayMode = gridModes[(gridModes.indexOf(gridDisplayMode) + 1) % gridModes.length];
                        break;
                    case 'angles':
                        const angleModes = ['degrees', 'radians', 'none'];
                        angleDisplayMode = angleModes[(angleModes.indexOf(angleDisplayMode) + 1) % angleModes.length];
                        showAngles = angleDisplayMode !== 'none';
                        break;
                    case 'distances':
                        const distModes = ['on', 'none'];
                        distanceDisplayMode = distModes[(distModes.indexOf(distanceDisplayMode) + 1) % distModes.length];
                        showDistances = distanceDisplayMode === 'on';
                        break;
                }
                return true;
            }
        }
    }

    return false;
}

function addToRecentColors(color) {
    if (recentColors.includes(color)) {
        return;
    }
    recentColors.push(color);

    if (isColorPaletteExpanded) {
        buildColorPaletteUI();
    }
}

function updateMouseCoordinates(screenPos) {
    if (coordsDisplayMode === 'none' || !screenPos || !isMouseOverCanvas) {
        labelsToKeepThisFrame.delete('mouse-coord-text');
        return;
    }

    let displayPos;
    if (currentShiftPressed && ghostPointPosition) {
        displayPos = ghostPointPosition;
    } else {
        displayPos = screenToData(screenPos);
    }
    
    let effectiveGridInterval = 1; 
    if (gridDisplayMode !== 'none' && lastGridState.interval1) {
        effectiveGridInterval = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
    }
    
    let decimalPlaces = 0;
    if (effectiveGridInterval > 0) {
        decimalPlaces = Math.max(0, -Math.floor(Math.log10(effectiveGridInterval * 0.999)));
        decimalPlaces = Math.min(decimalPlaces + 1, 6); 
    }
    
    const angleDecimalPlaces = Math.min(decimalPlaces + 1, 4);


    let textContent = '';

    switch (coordsDisplayMode) {
        case 'regular': {
            let xValue = displayPos.x;
            let yValue = displayPos.y;

            // Apply toFixed, then add phantom minus if the value is non-negative
            let xText = xValue.toFixed(decimalPlaces);
            if (xValue >= 0) xText = `\\hphantom{-}${xText}`;

            let yText = yValue.toFixed(decimalPlaces);
            if (yValue >= 0) yText = `\\hphantom{-}${yText}`;

            textContent = `\\begin{pmatrix*}[r] x \\\\ y \\end{pmatrix*} = \\begin{pmatrix*}[r] ${xText} \\\\ ${yText} \\end{pmatrix*}`;
            break;
        }
        case 'complex': {
            let reValue = displayPos.x;
            let imValue = displayPos.y;

            // Apply toFixed, then add phantom minus for the real part if non-negative
            let rePart = reValue.toFixed(decimalPlaces);
            if (reValue >= 0) rePart = `\\hphantom{-}${rePart}`;

            // Absolute value for imaginary part, its sign is determined by the `sign` variable
            let imPartAbs = Math.abs(imValue).toFixed(decimalPlaces);
            const sign = imValue < 0 ? '-' : '+'; 

            textContent = `z = ${rePart} ${sign} ${imPartAbs}i`;
            break;
        }
        case 'polar': {
            let rValue = Math.hypot(displayPos.x, displayPos.y);
            let thetaRaw = Math.atan2(displayPos.y, displayPos.x); 

            // Apply toFixed, then add phantom minus for radius (radius is always non-negative)
            let rText = rValue.toFixed(decimalPlaces);
            if (rValue >= 0) rText = `\\hphantom{-}${rText}`; 

            let angleStr;
            if (angleDisplayMode === 'degrees') {
                let thetaDeg = normalizeAngleDegrees(thetaRaw * 180 / Math.PI);
                angleStr = thetaDeg.toFixed(angleDecimalPlaces);
                // Add phantom minus for degrees if non-negative (as normalized degrees are 0-360)
                if (thetaDeg >= 0) angleStr = `\\hphantom{-}${angleStr}`; 
                angleStr += `^{\\circ}`;
            } else { // Radians
                let thetaRad = normalizeAngleToPi(thetaRaw);
                angleStr = thetaRad.toFixed(angleDecimalPlaces);
                // Add phantom minus for radians if non-negative (as normalized radians are -Pi to Pi)
                if (thetaRad >= 0) angleStr = `\\hphantom{-}${angleStr}`; 
            }
            
            textContent = `\\begin{pmatrix*}[r] r \\\\ \\theta \\end{pmatrix*} = \\begin{pmatrix*}[r] ${rText} \\\\ ${angleStr} \\end{pmatrix*}`;
            break;
        }
    }

    const canvasWidth = canvas.width / dpr;
    const padding = 10;
    updateHtmlLabel({
        id: 'mouse-coord-text',
        content: textContent,
        x: canvasWidth - padding,
        y: padding,
        color: 'rgba(255, 255, 255, 0.7)',
        fontSize: 14,
        options: { textAlign: 'right', textBaseline: 'top' } 
    });
}

function updateHtmlLabel({ id, content, x, y, color, fontSize, options = {} }) {
    labelsToKeepThisFrame.add(id);
    let el = activeHtmlLabels.get(id);

    if (!el) {
        el = document.createElement('div');
        el.style.position = 'absolute';
        el.style.fontFamily = 'KaTeX_Main, Times New Roman, serif';
        el.style.whiteSpace = 'nowrap';
        htmlOverlay.appendChild(el);
        activeHtmlLabels.set(id, el);
    }

    let transform = '';
    if (options.textAlign === 'center') {
        transform += ' translateX(-50%)';
    } else if (options.textAlign === 'right') {
        transform += ' translateX(-100%)';
    }

    if (options.textBaseline === 'middle') {
        transform += ' translateY(-50%)';
    } else if (options.textBaseline === 'bottom') {
        transform += ' translateY(-100%)';
    }

    if (options.rotation !== undefined) {
        transform += ` rotate(${options.rotation}deg)`;
    }

    el.style.transform = transform.trim();
    el.style.left = `${x}px`;
    el.style.top = `${y}px`;
    el.style.color = color;
    el.style.fontSize = `${fontSize}px`;

    if (el.katexContent !== content) {
        if (typeof window.katex !== 'undefined') {
            katex.render(content, el, {
                throwOnError: false,
                displayMode: false
            });
        } else {
            el.textContent = content.replace(/\\frac\{([^}]+)\}\{([^}]+)\}/g, "$1/$2").replace(/[\\{}]/g, "");
        }
        el.katexContent = content;
    }
}

function cleanupHtmlLabels() {
    const coordinateLabels = new Set(['mouse-coord-x', 'mouse-coord-y']);
    coordinateLabels.forEach(id => labelsToKeepThisFrame.add(id));
    
    for (const [id, el] of activeHtmlLabels.entries()) {
        if (!labelsToKeepThisFrame.has(id)) {
            el.remove();
            activeHtmlLabels.delete(id);
        }
    }
}

function getPrecedingSegment(pointId, edgesToIgnoreIds = []) {
    const currentPoint = findPointById(pointId);
    if (!currentPoint) return null;
    for (let i = allEdges.length - 1; i >= 0; i--) {
        const edge = allEdges[i];
        const edgeIdentifier = edge.id1 < edge.id2 ? edge.id1 + edge.id2 : edge.id2 + edge.id1;
        if (edgesToIgnoreIds.includes(edgeIdentifier)) continue;
        let otherPointId = null;
        if (edge.id1 === pointId) otherPointId = edge.id2;
        else if (edge.id2 === pointId) otherPointId = edge.id1;
        if (otherPointId) {
            const otherPoint = findPointById(otherPointId);
            if (otherPoint) {
                const dx = currentPoint.x - otherPoint.x; const dy = currentPoint.y - otherPoint.y;
                return { p1: otherPoint, p2: currentPoint, angleRad: Math.atan2(dy, dx), length: Math.sqrt(dx*dx + dy*dy), edgeId: edgeIdentifier };
            }
        }
    }
    return null;
}

function setCurrentColor(newColor) {
    const oldColor = currentColor;
    let changedPoints = [];
    if (selectedPointIds.length > 0) {
        selectedPointIds.forEach(id => {
            const point = findPointById(id);
            if (point && point.type === 'regular') {
                changedPoints.push({ id: point.id, oldColor: point.color || oldColor });
                point.color = newColor;
            }
        });
    }
    // FIX 2: Prevent transform centers from changing color
    // activeCenterId is the *last selected* center, not necessarily all selected centers
    selectedCenterIds.forEach(id => {
        const center = findPointById(id);
        // Only if it's explicitly a center point
        if (center && center.type !== 'regular') {
            // No color change for centers, they stay white as per drawCenterSymbol
            // So no need to add to changedPoints here for color
        }
    });

    if (changedPoints.length > 0) {
        const actualUndoState = {
            points: allPoints.map(p => {
                const changed = changedPoints.find(cp => cp.id === p.id);
                // Ensure center points are always stored with 'white' color in undo history if they were just placed
                if (p.type !== 'regular') {
                    return { ...p, color: 'white' }; // Centers always white in undo
                }
                return changed ? { ...p, color: changed.oldColor } : { ...p };
            }),
            edges: JSON.parse(JSON.stringify(allEdges)),
            selectedPointIds: JSON.parse(JSON.stringify(selectedPointIds)),
            selectedEdgeIds: JSON.parse(JSON.stringify(selectedEdgeIds)),
            activeCenterId,
            selectedCenterIds: JSON.parse(JSON.stringify(selectedCenterIds)), // Ensure selectedCenterIds is saved
            isDrawingMode,
            previewLineStartPointId
        };
        undoStack.push(actualUndoState);
        if (undoStack.length > MAX_HISTORY_SIZE) undoStack.shift();
        redoStack = [];
    }
    currentColor = newColor;
    colorPicker.value = newColor;
    addToRecentColors(newColor);
}

function saveStateForUndo() {
    const state = {
        points: JSON.parse(JSON.stringify(allPoints)),
        edges: JSON.parse(JSON.stringify(allEdges)),
        selectedPointIds: JSON.parse(JSON.stringify(selectedPointIds)),
        selectedEdgeIds: JSON.parse(JSON.stringify(selectedEdgeIds)),
        activeCenterId: activeCenterId,
        isDrawingMode: isDrawingMode,
        previewLineStartPointId: previewLineStartPointId,
        frozenReference_A_rad, frozenReference_A_baseRad, frozenReference_D_du, frozenReference_Origin_Data,
        frozenReference_D_g2g // <-- ADD THIS
    };
    undoStack.push(state);
    if (undoStack.length > MAX_HISTORY_SIZE) undoStack.shift();
    redoStack = [];
}

function restoreState(state) {
    allPoints = JSON.parse(JSON.stringify(state.points));
    allEdges = JSON.parse(JSON.stringify(state.edges));
    selectedPointIds = JSON.parse(JSON.stringify(state.selectedPointIds || []));
    selectedEdgeIds = JSON.parse(JSON.stringify(state.selectedEdgeIds || []));
    activeCenterId = state.activeCenterId !== undefined ? state.activeCenterId : null;
    isDrawingMode = state.isDrawingMode !== undefined ? state.isDrawingMode : false;
    previewLineStartPointId = state.previewLineStartPointId !== undefined ? state.previewLineStartPointId : null;
    frozenReference_A_rad = state.frozenReference_A_rad !== undefined ? state.frozenReference_A_rad : null;
    frozenReference_A_baseRad = state.frozenReference_A_baseRad !== undefined ? state.frozenReference_A_baseRad : null;
    frozenReference_D_du = state.frozenReference_D_du !== undefined ? state.frozenReference_D_du : null;
    frozenReference_Origin_Data = state.frozenReference_Origin_Data !== undefined ? state.frozenReference_Origin_Data : null;
    frozenReference_D_g2g = state.frozenReference_D_g2g !== undefined ? state.frozenReference_D_g2g : null; // <-- ADD THIS
    isActionInProgress = false; isDragConfirmed = false; isRectangleSelecting = false;
    isPanningBackground = false; dragPreviewPoints = [];
    actionTargetPoint = null; currentMouseButton = -1;
    clickData = { pointId: null, count: 0, timestamp: 0 };
    canvas.style.cursor = 'crosshair';
}

function handleUndo() {
    if (undoStack.length === 0) return;
    const currentStateForRedo = {
        points: JSON.parse(JSON.stringify(allPoints)),
        edges: JSON.parse(JSON.stringify(allEdges)),
        selectedPointIds: JSON.parse(JSON.stringify(selectedPointIds)),
        selectedEdgeIds: JSON.parse(JSON.stringify(selectedEdgeIds)),
        activeCenterId: activeCenterId,
        isDrawingMode: isDrawingMode,
        previewLineStartPointId: previewLineStartPointId,
        frozenReference_A_rad, frozenReference_A_baseRad, frozenReference_D_du, frozenReference_Origin_Data
    };
    redoStack.push(currentStateForRedo);
    if (redoStack.length > MAX_HISTORY_SIZE) redoStack.shift();
    const prevState = undoStack.pop();
    restoreState(prevState);
}

function handleRedo() {
    if (redoStack.length === 0) return;
    const currentStateForUndo = {
        points: JSON.parse(JSON.stringify(allPoints)),
        edges: JSON.parse(JSON.stringify(allEdges)),
        selectedPointIds: JSON.parse(JSON.stringify(selectedPointIds)),
        selectedEdgeIds: JSON.parse(JSON.stringify(selectedEdgeIds)),
        activeCenterId: activeCenterId,
        isDrawingMode: isDrawingMode,
        previewLineStartPointId: previewLineStartPointId,
        frozenReference_A_rad, frozenReference_A_baseRad, frozenReference_D_du, frozenReference_Origin_Data
    };
    undoStack.push(currentStateForUndo);
    if (undoStack.length > MAX_HISTORY_SIZE) undoStack.shift();
    const nextState = redoStack.pop();
    restoreState(nextState);
}

function screenToData(screenPos_css_pixels) {
    const screenX_physical = screenPos_css_pixels.x * dpr;
    const screenY_physical = screenPos_css_pixels.y * dpr;
    const canvasHeight_physical = canvas.height;
    return {
        x: (screenX_physical - viewTransform.offsetX) / viewTransform.scale,
        y: (canvasHeight_physical - screenY_physical - viewTransform.offsetY) / viewTransform.scale
    };
}

function dataToScreen(dataPos) {
    const canvasHeight_physical = canvas.height;
    const screenX_physical = dataPos.x * viewTransform.scale + viewTransform.offsetX;
    const screenY_physical = canvasHeight_physical - (dataPos.y * viewTransform.scale + viewTransform.offsetY);
    return {
        x: screenX_physical / dpr,
        y: screenY_physical / dpr
    };
}

function resizeCanvas() {
    const canvasContainer = document.querySelector('.canvas-container');
    const canvasWrapper = document.querySelector('.canvas-wrapper-relative');

    if (!canvasContainer || !canvasWrapper) {
        console.error("Canvas container or wrapper not found. Ensure index.html structure has '.canvas-container' and '.canvas-wrapper-relative'.");
        return;
    }

    const cW = canvasWrapper.offsetWidth;
    const cH = canvasWrapper.offsetHeight;

    canvas.width = cW * dpr;
    canvas.height = cH * dpr;
    canvas.style.width = `${cW}px`;
    canvas.style.height = `${cH}px`;

    if (htmlOverlay) {
        htmlOverlay.style.width = `${cW}px`;
        htmlOverlay.style.height = `${cH}px`;
    }
}

function findPointById(id) { return allPoints.find(p => p.id === id); }

function findClickedPoint(clickPos) {
    const dataPos = screenToData(clickPos);
    const selectRadiusDataRegular = POINT_SELECT_RADIUS / viewTransform.scale;
    const selectRadiusDataCenter = (CENTER_POINT_VISUAL_RADIUS + POINT_SELECT_RADIUS / 2) / viewTransform.scale;

    // Prioritize center points for selection
    for (let i = allPoints.length - 1; i >= 0; i--) {
        const point = allPoints[i];
        if (point.type !== 'regular' && distance(dataPos, point) < selectRadiusDataCenter) return point;
    }

    // Then check for regular points
    for (let i = allPoints.length - 1; i >= 0; i--) {
        const point = allPoints[i];
        if (point.type === 'regular' && distance(dataPos, point) < selectRadiusDataRegular) return point;
    }
    return null;
}

function findClickedEdge(clickPos) {
    const dataPos = screenToData(clickPos);
    const edgeClickThresholdData = EDGE_CLICK_THRESHOLD / viewTransform.scale;
    
    for (let i = allEdges.length - 1; i >= 0; i--) {
        const edge = allEdges[i];
        const p1 = findPointById(edge.id1);
        const p2 = findPointById(edge.id2);
        if (p1 && p2 && p1.type === 'regular' && p2.type === 'regular') {
            const closest = getClosestPointOnLineSegment(dataPos, p1, p2);
            if (closest.distance < edgeClickThresholdData && closest.onSegmentStrict) {
                return edge;
            }
        }
    }
    return null;
}

function getEdgeId(edge) {
    const DELIMITER = '_EDGE_';
    return edge.id1 < edge.id2 ? `${edge.id1}${DELIMITER}${edge.id2}` : `${edge.id2}${DELIMITER}${edge.id1}`;
}

function findNeighbors(pointId) {
    const n = new Set();
    allEdges.forEach(e => { if (e.id1 === pointId) n.add(e.id2); else if (e.id2 === pointId) n.add(e.id1); });
    return Array.from(n);
}

function findNeighborEdges(pointId) {
    return allEdges.filter(e => e.id1 === pointId || e.id2 === pointId);
}

function findAllPointsInSubgraph(startPointId) {
    if (!findPointById(startPointId)) return [];
    const visited = new Set(); const queue = [startPointId]; const subgraphPointIds = [];
    visited.add(startPointId);
    while (queue.length > 0) {
        const currentPointId = queue.shift(); subgraphPointIds.push(currentPointId);
        findNeighbors(currentPointId).forEach(neighborId => {
            if (!visited.has(neighborId)) { visited.add(neighborId); queue.push(neighborId); }
        });
    }
    return subgraphPointIds;
}

function drawCenterSymbol(point) {
    const screenPos = dataToScreen(point); const radius = CENTER_POINT_VISUAL_RADIUS;
    // FIX 2: Transform symbols should not be colorable
    ctx.strokeStyle = 'white'; // Always draw centers in white
    ctx.setLineDash([]); ctx.lineWidth = LINE_WIDTH;
    if (point.type === 'center_rotate_scale') {
        ctx.beginPath(); ctx.arc(screenPos.x, screenPos.y, radius, 0, 2 * Math.PI); ctx.stroke();
        ctx.beginPath(); ctx.moveTo(screenPos.x - radius, screenPos.y); ctx.lineTo(screenPos.x + radius, screenPos.y); ctx.stroke();
        ctx.beginPath(); ctx.moveTo(screenPos.x, screenPos.y - radius); ctx.lineTo(screenPos.x, screenPos.y + radius); ctx.stroke();
    } else if (point.type === 'center_rotate_only') {
        ctx.beginPath(); ctx.arc(screenPos.x, screenPos.y, radius, 0, 2 * Math.PI); ctx.stroke();
    } else if (point.type === 'center_scale_only') {
        ctx.beginPath(); ctx.moveTo(screenPos.x - radius, screenPos.y); ctx.lineTo(screenPos.x + radius, screenPos.y); ctx.stroke();
        ctx.beginPath(); ctx.moveTo(screenPos.x, screenPos.y - radius); ctx.lineTo(screenPos.x, screenPos.y + radius); ctx.stroke();
    }
}

function getCircumcenter(p1, p2, p3) {
    const D = 2 * (p1.x * (p2.y - p3.y) + p2.x * (p3.y - p1.y) + p3.x * (p1.y - p2.y));
    if (Math.abs(D) < 1e-9) {
        return null; // Points are collinear, no unique circumcenter
    }

    const p1_sq = p1.x * p1.x + p1.y * p1.y;
    const p2_sq = p2.x * p2.x + p2.y * p2.y;
    const p3_sq = p3.x * p3.x + p3.y * p3.y;

    const Ux = (1 / D) * (p1_sq * (p2.y - p3.y) + p2_sq * (p3.y - p1.y) + p3_sq * (p1.y - p2.y));
    const Uy = (1 / D) * (p1_sq * (p3.x - p2.x) + p2_sq * (p1.x - p3.x) + p3_sq * (p2.x - p1.x));

    return { x: Ux, y: Uy, type: 'equidistant-circumcenter' };
}

function getProjectionOnPerpendicularBisector(p, p1, p2) {
    const midPoint = { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 };
    const p1p2_vec = { x: p2.x - p1.x, y: p2.y - p1.y };
    const perp_vec = { x: -p1p2_vec.y, y: p1p2_vec.x };
    
    const v_sq_mag = perp_vec.x * perp_vec.x + perp_vec.y * perp_vec.y;
    if (v_sq_mag < 1e-9) return null; // p1 and p2 are the same point

    const Ap_vec = { x: p.x - midPoint.x, y: p.y - midPoint.y };
    const t = (Ap_vec.x * perp_vec.x + Ap_vec.y * perp_vec.y) / v_sq_mag;
    
    return { x: midPoint.x + t * perp_vec.x, y: midPoint.y + t * perp_vec.y, type: 'equidistant-bisector' };
}

function handleCopy() {
    const pointsToCopyIds = new Set(selectedPointIds);
    if (activeCenterId) pointsToCopyIds.add(activeCenterId);
    
    if (pointsToCopyIds.size === 0 && selectedEdgeIds.length === 0) return;
    
    selectedEdgeIds.forEach(edgeId => {
        const [id1, id2] = edgeId.split('-');
        pointsToCopyIds.add(id1);
        pointsToCopyIds.add(id2);
    });
    
    clipboard.points = Array.from(pointsToCopyIds).map(id => {
        const p = findPointById(id);
        return p ? { ...p } : null;
    }).filter(p => p);
    
    clipboard.edges = [];
    selectedEdgeIds.forEach(edgeId => {
        const [id1, id2] = edgeId.split('-');
        const edge = allEdges.find(e => getEdgeId(e) === edgeId);
        if (edge) clipboard.edges.push({ ...edge });
    });
    
    allEdges.forEach(edge => {
        if (pointsToCopyIds.has(edge.id1) && pointsToCopyIds.has(edge.id2) && 
            findPointById(edge.id1)?.type === 'regular' && findPointById(edge.id2)?.type === 'regular') {
            const edgeId = getEdgeId(edge);
            if (!clipboard.edges.find(e => getEdgeId(e) === edgeId)) {
                clipboard.edges.push({ ...edge });
            }
        }
    });
    
    clipboard.referencePoint = screenToData(mousePos);
}

function handleCut() {
    const pointsToCutIds = new Set(selectedPointIds);
    if (activeCenterId) pointsToCutIds.add(activeCenterId);
    
    if (pointsToCutIds.size === 0 && selectedEdgeIds.length === 0) return;
    
    saveStateForUndo();
    handleCopy();
    deleteSelectedItems();
}

function handlePaste() {
    if (clipboard.points.length === 0 || !clipboard.referencePoint) return;
    saveStateForUndo();
    const pastePosData = screenToData(mousePos);
    const deltaX = pastePosData.x - clipboard.referencePoint.x; const deltaY = pastePosData.y - clipboard.referencePoint.y;
    const oldToNewIdMap = new Map(); const newPastedRegularPointIds = []; let newPastedActiveCenterId = null;
    performEscapeAction();
    clipboard.points.forEach(cbPoint => {
        const newId = generateUniqueId();
        const newPoint = { ...cbPoint, id: newId, x: cbPoint.x + deltaX, y: cbPoint.y + deltaY };
        allPoints.push(newPoint); oldToNewIdMap.set(cbPoint.id, newId);
        if (newPoint.type === 'regular') newPastedRegularPointIds.push(newId);
        else newPastedActiveCenterId = newId;
    });
    clipboard.edges.forEach(cbEdge => {
        const newP1Id = oldToNewIdMap.get(cbEdge.id1); const newP2Id = oldToNewIdMap.get(cbEdge.id2);
        if (newP1Id && newP2Id) allEdges.push({ id1: newP1Id, id2: newP2Id });
    });
    selectedPointIds = newPastedRegularPointIds; 
    selectedEdgeIds = clipboard.edges.map(e => getEdgeId({id1: oldToNewIdMap.get(e.id1), id2: oldToNewIdMap.get(e.id2)}));
    activeCenterId = newPastedActiveCenterId;
}

function drawPoint(point) {
    let isSelected;
    if (point.type === 'regular') {
        isSelected = selectedPointIds.includes(point.id);
    } else {
        isSelected = selectedCenterIds.includes(point.id);
    }

    const pointColor = point.color || currentColor;
    const screenPos = dataToScreen(point);
    
    if (point.type !== 'regular') {
        drawCenterSymbol(point);
    } else {
        ctx.beginPath();
        ctx.arc(screenPos.x, screenPos.y, POINT_RADIUS, 0, 2 * Math.PI);
        ctx.fillStyle = pointColor;
        ctx.fill();
    }

    if (isSelected) {
        ctx.save();
        ctx.shadowColor = point.id === activeCenterId ? '#00ffff' : '#4da6ff';
        ctx.shadowBlur = 15;
        ctx.globalAlpha = 0.8;
        
        ctx.beginPath();
        const glowRadius = point.type !== 'regular' ? CENTER_POINT_VISUAL_RADIUS + 3 : POINT_RADIUS + 3;
        ctx.arc(screenPos.x, screenPos.y, glowRadius, 0, 2 * Math.PI);
        ctx.strokeStyle = point.id === activeCenterId ? '#00ffff' : '#4da6ff';
        ctx.lineWidth = 2;
        ctx.stroke();
        
        ctx.restore();
    }
}

function drawAllEdges() {
    ctx.lineWidth = LINE_WIDTH;
    allEdges.forEach(edge => {
        const p1_orig = findPointById(edge.id1);
        const p2_orig = findPointById(edge.id2);
        if (!p1_orig || !p2_orig || p1_orig.type !== 'regular' || p2_orig.type !== 'regular') return;

        let p1_render = { ...p1_orig };
        let p2_render = { ...p2_orig };
        let isBeingDragged = false;

        if (isDragConfirmed && dragPreviewPoints.length > 0) {
            const p1Preview = dragPreviewPoints.find(dp => dp.id === p1_orig.id);
            const p2Preview = dragPreviewPoints.find(dp => dp.id === p2_orig.id);
            if (p1Preview) { p1_render.x = p1Preview.x; p1_render.y = p1Preview.y; }
            if (p2Preview) { p2_render.x = p2Preview.x; p2_render.y = p2Preview.y; }
            if (p1Preview || p2Preview) isBeingDragged = true;
        }

        const p1Screen = dataToScreen(p1_render);
        const p2Screen = dataToScreen(p2_render);
        const edgeId = getEdgeId(edge);
        const isSelected = selectedEdgeIds.includes(edgeId);
        
        ctx.beginPath();
        ctx.moveTo(p1Screen.x, p1Screen.y);
        ctx.lineTo(p2Screen.x, p2Screen.y);

        const color1 = p1_orig.color || currentColor;
        const color2 = p2_orig.color || currentColor;
        if (color1 === color2) {
            ctx.strokeStyle = color1;
        } else {
            const gradient = ctx.createLinearGradient(p1Screen.x, p1Screen.y, p2Screen.x, p2Screen.y);
            gradient.addColorStop(0, color1);
            gradient.addColorStop(1, color2);
            ctx.strokeStyle = gradient;
        }
        
        ctx.setLineDash(isBeingDragged ? DASH_PATTERN : []);
        ctx.lineWidth = LINE_WIDTH;
        ctx.stroke();
        ctx.setLineDash([]);
        
        if (isSelected) {
            ctx.beginPath();
            ctx.moveTo(p1Screen.x, p1Screen.y);
            ctx.lineTo(p2Screen.x, p2Screen.y);
            ctx.strokeStyle = '#4da6ff';
            ctx.globalAlpha = 0.8;
            ctx.lineWidth = LINE_WIDTH + 4;
            ctx.stroke();
            ctx.globalAlpha = 1.0;
        }
    });
    ctx.setLineDash([]);
    ctx.strokeStyle = 'white';
}

function deleteSelectedItems() {
    if (selectedPointIds.length === 0 && selectedEdgeIds.length === 0 && selectedCenterIds.length === 0) return;
    
    saveStateForUndo();
    
    selectedEdgeIds.forEach(edgeId => {
        const [id1, id2] = edgeId.split('-');
        allEdges = allEdges.filter(edge => getEdgeId(edge) !== edgeId);
    });
    
    selectedPointIds.forEach(pointId => {
        const neighborEdges = findNeighborEdges(pointId);
        
        if (neighborEdges.length === 2) {
            const edge1 = neighborEdges[0];
            const edge2 = neighborEdges[1];
            
            const otherPoint1 = edge1.id1 === pointId ? edge1.id2 : edge1.id1;
            const otherPoint2 = edge2.id1 === pointId ? edge2.id2 : edge2.id1;
            
            if (otherPoint1 !== otherPoint2) {
                allEdges.push({ id1: otherPoint1, id2: otherPoint2 });
            }
        }
        
        allEdges = allEdges.filter(edge => edge.id1 !== pointId && edge.id2 !== pointId);
    });
    
    const idsToDelete = new Set([...selectedPointIds, ...selectedCenterIds]);
    
    allPoints = allPoints.filter(point => !idsToDelete.has(point.id));
    
    selectedPointIds = [];
    selectedEdgeIds = [];
    selectedCenterIds = [];
    activeCenterId = null;
    
    if (previewLineStartPointId && !findPointById(previewLineStartPointId)) {
        isDrawingMode = false;
        previewLineStartPointId = null;
        frozenReference_A_rad = null;
        frozenReference_A_baseRad = null;
        frozenReference_D_du = null;
        frozenReference_Origin_Data = null;
    }
}

function drawTransformIndicators(ctx) {
    if (!transformIndicatorData) return;

    const { center, startPos, currentPos, rotation, scale, isSnapping, snappedScaleValue, transformType } = transformIndicatorData;

    const centerScreen = dataToScreen(center);
    const startScreen = dataToScreen(startPos);
    const currentScreen = dataToScreen(currentPos);

    const color = isSnapping ? 'rgba(240, 240, 130, 0.95)' : 'rgba(230, 230, 230, 0.95)';
    const katexFontSize = 12;

    const startVecScreen = { x: startScreen.x - centerScreen.x, y: startScreen.y - centerScreen.y };
    const currentVecScreen = { x: currentScreen.x - centerScreen.x, y: currentScreen.y - centerScreen.y };

    const startAngleScreen = Math.atan2(startVecScreen.y, startVecScreen.x);
    const currentAngleScreen = Math.atan2(currentVecScreen.y, currentVecScreen.x);
    const arcRadius = Math.hypot(startVecScreen.x, startVecScreen.y);

    ctx.save();
    ctx.setLineDash(DASH_PATTERN);
    ctx.strokeStyle = color;
    ctx.lineWidth = 1;

    ctx.beginPath();
    ctx.moveTo(centerScreen.x, centerScreen.y);
    ctx.lineTo(startScreen.x, startScreen.y);
    ctx.stroke();

    ctx.beginPath();
    ctx.moveTo(centerScreen.x, centerScreen.y);
    ctx.lineTo(currentScreen.x, currentScreen.y);
    ctx.stroke();

    ctx.setLineDash([]);

    if (transformType !== 'center_scale_only' && Math.abs(rotation) > 0.001) {
        const screenRotation = -rotation;
        const anticlockwise = screenRotation < 0;
        ctx.beginPath();
        ctx.arc(centerScreen.x, centerScreen.y, arcRadius, startAngleScreen, startAngleScreen + screenRotation, anticlockwise);
        ctx.stroke();
    }
    ctx.restore();

    if (transformType !== 'center_scale_only' && Math.abs(rotation) > 0.001) {
        const angleDeg = rotation * (180 / Math.PI);
        const angleText = `${formatNumber(angleDeg, angleSigFigs)}^{\\circ}`;
        const angleDiff = normalizeAngleToPi(currentAngleScreen - startAngleScreen);
        const bisectorAngle = startAngleScreen + angleDiff / 2;
        const labelRadius = arcRadius + 20;
        const angleTextX = centerScreen.x + labelRadius * Math.cos(bisectorAngle);
        const angleTextY = centerScreen.y + labelRadius * Math.sin(bisectorAngle);

        updateHtmlLabel({
            id: 'transform-angle-indicator',
            content: angleText,
            x: angleTextX,
            y: angleTextY,
            color: color,
            fontSize: katexFontSize,
            options: { textAlign: 'center', textBaseline: 'middle' }
        });
    }

    if (transformType !== 'center_rotate_only' && Math.abs(scale - 1) > 0.001) {
        let scaleText;
        if (isSnapping && snappedScaleValue !== null) {
            scaleText = `\\times ${formatFraction(snappedScaleValue, 0.001, 10)}`;
        } else {
            scaleText = `\\times ${formatNumber(scale, distanceSigFigs)}`;
        }

        const midX = (centerScreen.x + currentScreen.x) / 2;
        const midY = (centerScreen.y + currentScreen.y) / 2;
        let textPerpAngle = currentAngleScreen - Math.PI / 2;
        const textOffset = 18;
        const scaleTextX = midX + Math.cos(textPerpAngle) * textOffset;
        const scaleTextY = midY + Math.sin(textPerpAngle) * textOffset;

        let rotationDeg = currentAngleScreen * (180 / Math.PI);
        if (rotationDeg > 90 || rotationDeg < -90) {
            rotationDeg += 180;
        }

        updateHtmlLabel({
            id: 'transform-scale-indicator',
            content: scaleText,
            x: scaleTextX,
            y: scaleTextY,
            color: color,
            fontSize: katexFontSize,
            options: { textAlign: 'center', textBaseline: 'bottom', rotation: rotationDeg }
        });
    }
}


function drawAngleArc(centerScreen, dataStartAngleRad, dataEndAngleRad, radius, color, isDashed = false) {
    ctx.save();
    ctx.strokeStyle = color;
    ctx.lineWidth = 1;
    ctx.setLineDash(isDashed ? [3, 3] : []);
    const canvasStartAngle = -dataStartAngleRad;
    const canvasEndAngle = -dataEndAngleRad;
    let signedAngleDiffData = normalizeAngleToPi(dataEndAngleRad - dataStartAngleRad);
    ctx.beginPath();
    ctx.arc(centerScreen.x, centerScreen.y, radius, canvasStartAngle, canvasEndAngle, signedAngleDiffData > 0);
    ctx.stroke();
    ctx.restore();
}

function zoomAt(zoomCenterScreen_css_pixels, scaleFactor) {
    const oldScale = viewTransform.scale;
    let newScale = oldScale * scaleFactor;

    // Prevent scale from becoming zero, which would break calculations.
    // This value is small enough to be effectively infinite for zooming out.
    if (newScale < 1e-20) {
        newScale = 1e-20;
    }

    const mouseX_physical = zoomCenterScreen_css_pixels.x * dpr;
    const mouseY_physical = zoomCenterScreen_css_pixels.y * dpr;

    // This is the corrected, numerically stable calculation.
    // It finds the new offset based on the old one and the scale factor,
    // which is more robust at extreme zoom levels.
    viewTransform.offsetX = mouseX_physical * (1 - scaleFactor) + viewTransform.offsetX * scaleFactor;
    
    // The offsetY calculation must account for the canvas's inverted Y-axis.
    // This was the source of the bug in my previous version.
    viewTransform.offsetY = (canvas.height - mouseY_physical) * (1 - scaleFactor) + viewTransform.offsetY * scaleFactor;

    viewTransform.scale = newScale;
}

function getDrawingContext(currentDrawStartPointId) {
    let offsetAngleRad = 0;
    let currentSegmentReferenceD; // Will be set conditionally
    let currentSegmentReferenceA_for_display = Math.PI / 2;
    let isFirstSegmentBeingDrawn = true;

    const p_current = findPointById(currentDrawStartPointId);
    if (!p_current) {
        // This case implies no active drawing line, so it implicitly is the 'first segment' conceptually.
        isFirstSegmentBeingDrawn = true;
        // The currentSegmentReferenceD for a *new* drawing operation will be the grid interval or default.
        if (gridDisplayMode !== 'none' && lastGridState.interval1) {
            currentSegmentReferenceD = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
        } else {
            currentSegmentReferenceD = DEFAULT_REFERENCE_DISTANCE;
        }
        // If a reference was globally frozen, that takes precedence even for the "first" segment
        // of a new drawing sequence, but it's more about "the current length unit"
        if (frozenReference_D_du !== null) {
            currentSegmentReferenceD = frozenReference_D_du;
        }

        return {
            offsetAngleRad,
            currentSegmentReferenceD,
            currentSegmentReferenceA_for_display,
            isFirstSegmentBeingDrawn,
            displayAngleA_valueRad_for_A_equals_label: null,
            displayAngleA_originPointData_for_A_equals_label: null,
            frozen_A_baseRad_to_display: null,
            frozen_D_du_to_display: null,
            frozen_D_g2g_to_display: null,
            frozen_Origin_Data_to_display: null
        };
    }

    const segment1_prev_to_current = getPrecedingSegment(p_current.id);

    if (segment1_prev_to_current) {
        isFirstSegmentBeingDrawn = false;
        offsetAngleRad = segment1_prev_to_current.angleRad;
        currentSegmentReferenceD = frozenReference_D_du !== null ? frozenReference_D_du : segment1_prev_to_current.length;

        if (frozenReference_A_rad !== null) {
            if (Math.abs(frozenReference_A_rad) < GEOMETRY_CALCULATION_EPSILON) {
                currentSegmentReferenceA_for_display = DEFAULT_REFERENCE_ANGLE_RAD;
            } else {
                currentSegmentReferenceA_for_display = Math.abs(frozenReference_A_rad);
            }
        } else {
            currentSegmentReferenceA_for_display = DEFAULT_REFERENCE_ANGLE_RAD;
        }
    } else {
        isFirstSegmentBeingDrawn = true;
        if (gridDisplayMode !== 'none' && lastGridState.interval1) {
            currentSegmentReferenceD = (lastGridState.alpha2 > lastGridState.alpha1 && lastGridState.interval2) ? lastGridState.interval2 : lastGridState.interval1;
        } else {
            currentSegmentReferenceD = DEFAULT_REFERENCE_DISTANCE;
        }
        if (frozenReference_D_du !== null) {
            currentSegmentReferenceD = frozenReference_D_du;
        }
        offsetAngleRad = 0;
        currentSegmentReferenceA_for_display = DEFAULT_REFERENCE_ANGLE_RAD;
    }

    return {
        offsetAngleRad,
        currentSegmentReferenceD,
        currentSegmentReferenceA_for_display,
        isFirstSegmentBeingDrawn,
        displayAngleA_valueRad_for_A_equals_label: frozenReference_A_rad,
        displayAngleA_originPointData_for_A_equals_label: frozenReference_Origin_Data,
        frozen_A_baseRad_to_display: frozenReference_A_baseRad,
        frozen_D_du_to_display: frozenReference_D_du,
        frozen_D_g2g_to_display: frozenReference_D_g2g
    };
}

function drawReferenceElementsGeometry(context, shiftPressed) {
    if ((!showAngles && !showDistances) || !context.frozen_Origin_Data_to_display) return;

    // FIX: Check the distance from the drawing origin to the current mouse position.
    // Do not draw the reference angle if the mouse hasn't moved yet.
    const startPointData = context.frozen_Origin_Data_to_display;
    const mouseDataPos = screenToData(mousePos);
    const previewDistance = distance(startPointData, mouseDataPos);
    const epsilon = 1e-6;
    if (previewDistance < epsilon) return;

    const refElementColor = FROZEN_REFERENCE_COLOR;
    const ARC_RADIUS_SCREEN_REF = 35;

    const turnAngleData = context.displayAngleA_valueRad_for_A_equals_label;
    const baseAngleData = context.frozen_A_baseRad_to_display !== null ? context.frozen_A_baseRad_to_display : 0;
    const distanceData = context.frozen_D_du_to_display;

    if (!startPointData) return;

    const frozenOriginScreen = dataToScreen(startPointData);

    const absoluteAngleForRefLine = baseAngleData + turnAngleData;
    const endPointData = {
        x: startPointData.x + distanceData * Math.cos(absoluteAngleForRefLine),
        y: startPointData.y + distanceData * Math.sin(absoluteAngleForRefLine)
    };
    const startPointScreen = dataToScreen(startPointData);
    const endPointScreen = dataToScreen(endPointData);


    ctx.save();
    ctx.lineWidth = 1;
    ctx.strokeStyle = refElementColor;

    if (showAngles && context.displayAngleA_valueRad_for_A_equals_label !== null && Math.abs(context.displayAngleA_valueRad_for_A_equals_label) > epsilon) {
        const effectiveRadiusForLine = ARC_RADIUS_SCREEN_REF + ctx.lineWidth / 2;
        
        const dottedLineEndPointData = {
            x: startPointData.x + Math.cos(baseAngleData) * (effectiveRadiusForLine / viewTransform.scale),
            y: startPointData.y + Math.sin(baseAngleData) * (effectiveRadiusForLine / viewTransform.scale)
        };
        const dottedLineEndPointScreen = dataToScreen(dottedLineEndPointData);

        ctx.beginPath();
        ctx.moveTo(frozenOriginScreen.x, frozenOriginScreen.y);
        ctx.lineTo(dottedLineEndPointScreen.x, dottedLineEndPointScreen.y);
        ctx.setLineDash([1, 3]);
        ctx.stroke();

        drawAngleArc(frozenOriginScreen, baseAngleData, absoluteAngleForRefLine, ARC_RADIUS_SCREEN_REF, refElementColor, false);
    }
    ctx.restore();
}

function prepareSnapInfoTexts(startPointData, targetDataPos, snappedOutput, shiftPressed, drawingContext) {
    const epsilon = GEOMETRY_CALCULATION_EPSILON;
    if ((!showAngles && !showDistances) || snappedOutput.distance < epsilon) {
        labelsToKeepThisFrame.delete('snap-dist');
        labelsToKeepThisFrame.delete('snap-angle');
        return;
    }

    const startScreen = dataToScreen(startPointData);
    const { angle: snappedAbsoluteAngleDeg, distance: snappedDistanceData, lengthSnapFactor, angleSnapFactor, angleTurn, gridToGridSquaredSum, gridInterval } = snappedOutput;
    const { offsetAngleRad, isFirstSegmentBeingDrawn, currentSegmentReferenceA_for_display, currentSegmentReferenceD } = drawingContext;
    const currentElementColor = shiftPressed ? 'rgba(240, 240, 130, 0.95)' : 'rgba(230, 230, 230, 0.95)';
    const katexFontSize = 12;
    const ARC_RADIUS_SCREEN_SNAP = 30;

    if (showDistances) {
        let distanceText = '';

        if (shiftPressed && !isFirstSegmentBeingDrawn && frozenReference_D_du !== null) {
            const currentExactDistance = snappedDistanceData;

            if (gridToGridSquaredSum !== null && gridInterval) {
                const actualGridDistance = gridInterval * Math.sqrt(gridToGridSquaredSum);
                if (Math.abs(actualGridDistance - frozenReference_D_du) < epsilon) {
                    distanceText = '\\delta';
                } else {
                    const ratio = actualGridDistance / frozenReference_D_du;
                    let foundFraction = false;
                    for (const factor of SNAP_FACTORS) {
                        if (Math.abs(ratio - factor) < epsilon) {
                            distanceText = formatSnapFactor(factor, 'D');
                            foundFraction = true;
                            break;
                        }
                    }
                    if (!foundFraction) {
                        const [coeff, radicand] = simplifySquareRoot(gridToGridSquaredSum);
                        const finalCoeff = gridInterval * coeff;
                        const roundedFinalCoeff = parseFloat(finalCoeff.toFixed(10)); // Round to 10 decimal places for display
                        distanceText = formatSimplifiedRoot(roundedFinalCoeff, radicand);
                    }
                }
            } else if (frozenReference_D_du > epsilon) {
                const ratio = currentExactDistance / frozenReference_D_du;
                let foundFraction = false;
                for (const factor of SNAP_FACTORS) {
                    if (Math.abs(ratio - factor) < epsilon) {
                        distanceText = formatSnapFactor(factor, 'D');
                        foundFraction = true;
                        break;
                    }
                }
                if (!foundFraction) {
                    distanceText = formatNumber(snappedDistanceData, distanceSigFigs);
                }
            } else {
                distanceText = formatNumber(snappedDistanceData, distanceSigFigs);
            }
        } else if (shiftPressed && isFirstSegmentBeingDrawn && gridDisplayMode !== 'none' && gridInterval) {
            if (gridToGridSquaredSum !== null && gridInterval) {
                if (gridToGridSquaredSum >= 0) {
                    const [coeff, radicand] = simplifySquareRoot(gridToGridSquaredSum);
                    const finalCoeff = gridInterval * coeff;
                    const roundedFinalCoeff = parseFloat(finalCoeff.toFixed(10)); // Round to 10 decimal places for display
                    distanceText = formatSimplifiedRoot(roundedFinalCoeff, radicand);
                }
            } else {
                 distanceText = formatNumber(snappedDistanceData, distanceSigFigs);
            }
        } else {
            distanceText = formatNumber(snappedDistanceData, distanceSigFigs);
        }

        if (distanceText) {
            const startScreenPos = dataToScreen(startPointData);
            const endScreenPos = dataToScreen(targetDataPos);
            const edgeAngleScreen = Math.atan2(endScreenPos.y - startScreenPos.y, endScreenPos.x - startScreenPos.x);

            const midX = (startScreenPos.x + endScreenPos.x) / 2;
            const midY = (startScreenPos.y + endScreenPos.y) / 2;

            let textOffset = 18;

            if (Math.abs(Math.cos(edgeAngleScreen)) < VERTICAL_LINE_COS_THRESHOLD) {
                const distanceTextX = midX + textOffset;
                const distanceTextY = midY;
                updateHtmlLabel({
                    id: 'snap-dist',
                    content: distanceText,
                    x: distanceTextX,
                    y: distanceTextY,
                    color: currentElementColor,
                    fontSize: katexFontSize,
                    options: {
                        textAlign: 'center',
                        textBaseline: 'middle',
                        rotation: 90
                    }
                });
            } else {
                let textPerpAngle = edgeAngleScreen - Math.PI / 2;
                if (Math.sin(textPerpAngle) > 0) {
                    textPerpAngle += Math.PI;
                }
                const distanceTextX = midX + Math.cos(textPerpAngle) * textOffset;
                const distanceTextY = midY + Math.sin(textPerpAngle) * textOffset;

                let rotationDeg = edgeAngleScreen * (180 / Math.PI);
                if (rotationDeg > 90 || rotationDeg < -90) {
                    rotationDeg += 180;
                }

                updateHtmlLabel({
                    id: 'snap-dist',
                    content: distanceText,
                    x: distanceTextX,
                    y: distanceTextY,
                    color: currentElementColor,
                    fontSize: katexFontSize,
                    options: {
                        textAlign: 'center',
                        textBaseline: 'middle',
                        rotation: rotationDeg
                    }
                });
            }
        } else {
            labelsToKeepThisFrame.delete('snap-dist');
        }
    } else {
        labelsToKeepThisFrame.delete('snap-dist');
    }

    if (showAngles && snappedDistanceData > epsilon && Math.abs(angleTurn) > epsilon) {
        const currentLineAbsoluteAngle = Math.atan2(targetDataPos.y - startPointData.y, targetDataPos.x - startPointData.x);
        const baseAngleForArc = isFirstSegmentBeingDrawn ? 0 : offsetAngleRad;

        drawAngleArc(startScreen, baseAngleForArc, currentLineAbsoluteAngle, ARC_RADIUS_SCREEN_SNAP, currentElementColor);

        ctx.save();
        ctx.beginPath();
        const effectiveRadiusForLine = ARC_RADIUS_SCREEN_SNAP + ctx.lineWidth / 2;
        const baseLineEndData = {
            x: startPointData.x + (effectiveRadiusForLine / viewTransform.scale) * Math.cos(baseAngleForArc),
            y: startPointData.y + (effectiveRadiusForLine / viewTransform.scale) * Math.sin(baseAngleForArc)
        };
        const baseLineEndScreen = dataToScreen(baseLineEndData);
        ctx.moveTo(startScreen.x, startScreen.y);
        ctx.lineTo(baseLineEndScreen.x, baseLineEndScreen.y);
        ctx.strokeStyle = 'rgba(180, 180, 180, 0.6)';
        ctx.setLineDash([2, 3]);
        ctx.lineWidth = 1;
        ctx.stroke();
        ctx.restore();


        let angleText = '';
        const canReferToTheta = !isFirstSegmentBeingDrawn && frozenReference_A_rad !== null && Math.abs(frozenReference_A_rad) > epsilon;

        if (angleDisplayMode === 'degrees') {
            if (shiftPressed && canReferToTheta) {
                const referenceAngleRad = Math.abs(currentSegmentReferenceA_for_display);
                let potentialFactor = null;

                if (typeof angleSnapFactor === 'number') {
                    potentialFactor = angleSnapFactor;
                } else if (angleTurn !== null) {
                    if (Math.abs(referenceAngleRad) > epsilon) {
                        const calculatedFactor = angleTurn / referenceAngleRad;
                        for (const frac of NINETY_DEG_ANGLE_SNAP_FRACTIONS) {
                            if (Math.abs(Math.abs(calculatedFactor) - frac) < epsilon) {
                                potentialFactor = calculatedFactor < 0 ? -frac : frac;
                                break;
                            }
                        }
                    }
                }
                if (potentialFactor !== null && Math.abs(potentialFactor) > epsilon) {
                    angleText = formatSnapFactor(potentialFactor, 'A');
                } else {
                    let degrees = normalizeAngleToPi(angleTurn) * (180 / Math.PI);
                    if (Math.abs(degrees) > epsilon) {
                        angleText = `${formatNumber(degrees, angleSigFigs)}^{\\circ}`;
                    }
                }
            } else {
                let angleToFormatRad = isFirstSegmentBeingDrawn ? currentLineAbsoluteAngle : angleTurn;
                let angleToFormatDeg = normalizeAngleToPi(angleToFormatRad) * (180 / Math.PI);
                if (Math.abs(angleToFormatDeg) > epsilon) {
                    angleText = `${formatNumber(angleToFormatDeg, angleSigFigs)}^{\\circ}`;
                }
            }
        } else if (angleDisplayMode === 'radians') {
            if (shiftPressed && canReferToTheta) {
                const referenceAngleRad = Math.abs(currentSegmentReferenceA_for_display);
                let potentialFactor = null;

                if (typeof angleSnapFactor === 'number') {
                    potentialFactor = angleSnapFactor;
                } else if (angleTurn !== null) {
                    if (Math.abs(referenceAngleRad) > epsilon) {
                        const calculatedFactor = angleTurn / referenceAngleRad;
                        for (const frac of NINETY_DEG_ANGLE_SNAP_FRACTIONS) {
                            if (Math.abs(Math.abs(calculatedFactor) - frac) < epsilon) {
                                potentialFactor = calculatedFactor < 0 ? -frac : frac;
                                break;
                            }
                        }
                    }
                }
                if (potentialFactor !== null && Math.abs(potentialFactor) > epsilon) {
                    const fracStr = formatSnapFactor(potentialFactor, null);
                    angleText = `${fracStr === '0' ? '0' : fracStr + '\\pi'}`;
                    if (angleText.startsWith("1\\pi")) angleText = "\\pi";
                    if (angleText.startsWith("-1\\pi")) angleText = "-\\pi";
                } else {
                    let radians = normalizeAngleToPi(angleTurn);
                    if (Math.abs(radians) > epsilon) {
                        angleText = formatNumber(radians, angleSigFigs);
                    }
                }
            } else {
                let angleToFormatRad = isFirstSegmentBeingDrawn ? currentLineAbsoluteAngle : angleTurn;
                let radians = normalizeAngleToPi(angleToFormatRad);
                if (Math.abs(radians) > epsilon) {
                    angleText = formatNumber(radians, angleSigFigs);
                }
            }
        }

        if (angleText) {
            const canvasStartAngle = -baseAngleForArc;
            const canvasEndAngle = -currentLineAbsoluteAngle;
            const sumCos = Math.cos(canvasStartAngle) + Math.cos(canvasEndAngle);
            const sumSin = Math.sin(canvasStartAngle) + Math.sin(canvasEndAngle);
            let bisectorCanvasAngle = Math.atan2(sumSin, sumCos);
            const labelDistance = 60;
            const angleTextX = startScreen.x + Math.cos(bisectorCanvasAngle) * labelDistance;
            const angleTextY = startScreen.y + Math.sin(bisectorCanvasAngle) * labelDistance;
            updateHtmlLabel({ id: 'snap-angle', content: angleText, x: angleTextX, y: angleTextY, color: currentElementColor, fontSize: katexFontSize, options: { textAlign: 'center', textBaseline: 'middle' } });
        } else {
            labelsToKeepThisFrame.delete('snap-angle');
        }
    } else {
        labelsToKeepThisFrame.delete('snap-angle');
    }
}

function getCompletedSegmentProperties(startPoint, endPoint, existingEdges) {
    if (!startPoint || !endPoint) return null;

    const angle = Math.atan2(endPoint.y - startPoint.y, endPoint.x - startPoint.x);
    const length = distance(startPoint, endPoint);

    let precedingSegmentAngle = 0;
    let isFirstSegmentOfLine = true;

    for (let i = existingEdges.length - 1; i >= 0; i--) {
        const edge = existingEdges[i];
        let otherPointId = null;
        if (edge.id1 === startPoint.id && findPointById(edge.id2)?.type === 'regular') otherPointId = edge.id2;
        else if (edge.id2 === startPoint.id && findPointById(edge.id1)?.type === 'regular') otherPointId = edge.id1;

        if (otherPointId && otherPointId !== endPoint.id) {
            const prevPoint = findPointById(otherPointId);
            if (prevPoint) {
                precedingSegmentAngle = Math.atan2(startPoint.y - prevPoint.y, startPoint.x - prevPoint.x);
                isFirstSegmentOfLine = false;
                break;
            }
        }
    }

    const angleTurn = normalizeAngleToPi(angle - precedingSegmentAngle);

    return {
        startPoint,
        endPoint,
        absoluteAngleRad: angle,
        length: length,
        precedingSegmentAbsoluteAngleRad: precedingSegmentAngle,
        turnAngleRad: angleTurn,
        isFirstSegmentOfLine: isFirstSegmentOfLine
    };
}

function completeGraphOnSelectedPoints() {
    if (selectedPointIds.length < 2) return;
    
    const regularPointIds = selectedPointIds.filter(id => {
        const point = findPointById(id);
        return point && point.type === 'regular';
    });
    
    if (regularPointIds.length < 2) return;
    
    saveStateForUndo();
    
    let edgesAdded = 0;
    
    for (let i = 0; i < regularPointIds.length; i++) {
        for (let j = i + 1; j < regularPointIds.length; j++) {
            const id1 = regularPointIds[i];
            const id2 = regularPointIds[j];
            
            const edgeExists = allEdges.some(edge => 
                (edge.id1 === id1 && edge.id2 === id2) || 
                (edge.id1 === id2 && edge.id2 === id1)
            );
            
            if (!edgeExists) {
                allEdges.push({ id1: id1, id2: id2 });
                edgesAdded++;
            }
        }
    }
}

function applySelectionLogic(pointIdsToSelect, edgeIdsToSelect, wantsShift, wantsCtrl, targetIsCenter = false) {
    if (targetIsCenter) {
        handleCenterSelection(pointIdsToSelect[0], wantsShift, wantsCtrl);
    } else {
        if (wantsShift) {
            selectedPointIds = [...new Set([...selectedPointIds, ...pointIdsToSelect])];
            selectedEdgeIds = [...new Set([...selectedEdgeIds, ...edgeIdsToSelect])];
        } else if (wantsCtrl) {
            pointIdsToSelect.forEach(id => {
                const index = selectedPointIds.indexOf(id);
                if (index > -1) selectedPointIds.splice(index, 1);
                else selectedPointIds.push(id);
            });
            edgeIdsToSelect.forEach(id => {
                const index = selectedEdgeIds.indexOf(id);
                if (index > -1) selectedEdgeIds.splice(index, 1);
                else selectedEdgeIds.push(id);
            });
        } else {
            selectedPointIds = [...pointIdsToSelect];
            selectedEdgeIds = [...edgeIdsToSelect];
        }
    }
}

function drawGridIcon(ctx, rect, mode, isSelected) {
    const colorStrong = isSelected ? '#F9FAFB' : '#9CA3AF';
    const center = { x: rect.x + rect.width / 2, y: rect.y + rect.height / 2 };

    ctx.save();
    ctx.translate(center.x, center.y);
    const scale = rect.width / 32;
    ctx.scale(scale, scale);
    ctx.translate(-16, -16);

    ctx.strokeStyle = colorStrong;
    ctx.fillStyle = colorStrong;
    ctx.lineWidth = 1.5;

    switch (mode) {
        case 'lines':
            ctx.strokeRect(2, 2, 28, 28);
            ctx.beginPath();
            ctx.moveTo(2, 16); ctx.lineTo(30, 16);
            ctx.moveTo(16, 2); ctx.lineTo(16, 30);
            ctx.stroke();
            break;
        case 'points':
            ctx.strokeRect(2, 2, 28, 28);
            ctx.beginPath();
            [8, 16, 24].forEach(x => {
                [8, 16, 24].forEach(y => {
                    ctx.moveTo(x, y);
                    ctx.arc(x, y, 1.5, 0, 2 * Math.PI);
                });
            });
            ctx.fill();
            break;
        case 'polar':
            ctx.beginPath();
            ctx.arc(16, 16, 14, 0, 2 * Math.PI);
            ctx.stroke();
            ctx.beginPath();
            ctx.arc(16, 16, 7, 0, 2 * Math.PI);
            ctx.stroke();
            ctx.beginPath();
            ctx.moveTo(2, 16); ctx.lineTo(30, 16);
            ctx.moveTo(16, 2); ctx.lineTo(16, 30);
            ctx.stroke();
            break;
        case 'none':
            ctx.strokeRect(2, 2, 28, 28);
            break;
    }
    ctx.restore();
}

function redrawAll() {
    labelsToKeepThisFrame.clear();
    const actualCanvasWidth = canvas.width / dpr;
    const actualCanvasHeight = canvas.height / dpr;
    ctx.resetTransform();
    ctx.scale(dpr, dpr);
    ctx.fillStyle = '#1a1a1a';
    ctx.fillRect(0, 0, actualCanvasWidth, actualCanvasHeight);
    
    // Calculate linear grid state
    const { grid1Interval, grid2Interval, alpha1, alpha2 } = calculateGridIntervals(viewTransform.scale);
    lastGridState = { interval1: grid1Interval, interval2: grid2Interval, alpha1, alpha2, scale: viewTransform.scale };
    
    // Correctly call and store the new angular grid state array
    lastAngularGridState = getDynamicAngularIntervals(viewTransform, actualCanvasWidth, actualCanvasHeight);
    
    // Draw components
    drawGrid(ctx);
    if (coordsDisplayMode !== 'none') {
        drawAxes(ctx);
    }

    if (isDrawingMode && currentShiftPressed) {
        if (frozenReference_Origin_Data) {
            const frozenDisplayContext = {
                frozen_Origin_Data_to_display: frozenReference_Origin_Data,
                displayAngleA_valueRad_for_A_equals_label: frozenReference_A_rad,
                frozen_A_baseRad_to_display: frozenReference_A_baseRad,
                frozen_D_du_to_display: frozenReference_D_du,
                frozen_D_g2g_to_display: frozenReference_D_g2g
            };
            drawReferenceElementsGeometry(frozenDisplayContext, true);
            prepareReferenceElementsTexts(frozenDisplayContext, true);
        }
    }

    if (transformIndicatorData) {
        drawTransformIndicators(ctx);
        labelsToKeepThisFrame.add('transform-angle-indicator');
        labelsToKeepThisFrame.add('transform-scale-indicator');
    }

    drawAllEdges();
    allPoints.forEach(point => {
        let pointToDraw = { ...point };
        if (isDragConfirmed && dragPreviewPoints.length > 0) {
            const preview = dragPreviewPoints.find(dp => dp.id === point.id);
            if (preview) {
                pointToDraw.x = preview.x;
                pointToDraw.y = preview.y;
            }
        }
        drawPoint(pointToDraw);
    });

    if (isDragConfirmed) {
        const hybridPointStates = allPoints.map(p => {
            const draggedVersion = dragPreviewPoints.find(dp => dp.id === p.id);
            return draggedVersion || p;
        });
        if (actionContext.targetPoint) {
            drawDragFeedback(actionContext.targetPoint.id, hybridPointStates, currentShiftPressed);
        } else if (actionContext.targetEdge) {
            const draggedEdgeId = getEdgeId(actionContext.targetEdge);
            drawDragFeedback(actionContext.targetEdge.id1, hybridPointStates, false);
            drawDragFeedback(actionContext.targetEdge.id2, hybridPointStates, false, draggedEdgeId);
        }
    } else {
        if (selectedPointIds.length === 1 && selectedEdgeIds.length === 0) {
            drawDragFeedback(selectedPointIds[0], allPoints, false);
        } else if (selectedEdgeIds.length === 1 && selectedPointIds.length <= 2) {
            const selectedEdgeId = selectedEdgeIds[0];
            const edge = allEdges.find(e => getEdgeId(e) === selectedEdgeId);
            if (edge) {
                drawDragFeedback(edge.id1, allPoints, false);
                drawDragFeedback(edge.id2, allPoints, false, selectedEdgeId);
            }
        }
    }

    if (ghostPointPosition) {
        const screenPos = dataToScreen(ghostPointPosition);
        ctx.beginPath();
        ctx.arc(screenPos.x, screenPos.y, POINT_RADIUS, 0, 2 * Math.PI);
        ctx.fillStyle = 'rgba(240, 240, 130, 0.9)';
        ctx.fill();
    }

    if (isDrawingMode && previewLineStartPointId && !isActionInProgress) {
        const startPoint = findPointById(previewLineStartPointId);
        if (startPoint) {
            const currentPreviewDrawingContext = getDrawingContext(startPoint.id);
            const snappedData = getSnappedPosition(startPoint, mousePos, currentShiftPressed);
            const targetPosData = { x: snappedData.x, y: snappedData.y };
            const startScreen = dataToScreen(startPoint);
            const targetScreen = dataToScreen(targetPosData);
            ctx.beginPath();
            ctx.moveTo(startScreen.x, startScreen.y);
            ctx.lineTo(targetScreen.x, targetScreen.y);
            ctx.setLineDash(DASH_PATTERN);
            ctx.strokeStyle = currentShiftPressed ? 'rgba(240, 240, 130, 0.9)' : currentColor;
            ctx.lineWidth = LINE_WIDTH;
            ctx.stroke();
            ctx.setLineDash([]);
            if (snappedData.snapped) {
                ctx.beginPath();
                ctx.arc(targetScreen.x, targetScreen.y, POINT_RADIUS, 0, 2 * Math.PI);
                ctx.fillStyle = 'rgba(240, 240, 130, 0.9)';
                ctx.fill();
            }
            prepareSnapInfoTexts(startPoint, targetPosData, snappedData, currentShiftPressed, currentPreviewDrawingContext);
        }
    }

    if (isRectangleSelecting && isDragConfirmed) {
        ctx.strokeStyle = 'rgba(255,255,255,0.7)';
        ctx.lineWidth = 1;
        ctx.setLineDash(DASH_PATTERN);
        const rX = Math.min(rectangleSelectStartPos.x, mousePos.x);
        const rY = Math.min(rectangleSelectStartPos.y, mousePos.y);
        const rW = Math.abs(rectangleSelectStartPos.x - mousePos.x);
        const rH = Math.abs(rectangleSelectStartPos.y - mousePos.y);
        ctx.strokeRect(rX, rY, rW, rH);
        ctx.setLineDash([]);
    }

    updateMouseCoordinates(mousePos);
    drawCanvasUI(ctx);
    cleanupHtmlLabels();
}

function drawGrid(ctx) {
    if (gridDisplayMode === 'none') return;
    
    const baseGridColor = [136, 136, 136];
    ctx.save();
    
    const origin = dataToScreen({ x: 0, y: 0 });
    const canvasWidth = canvas.width / dpr;
    const canvasHeight = canvas.height / dpr;

    if (gridDisplayMode === 'polar') {
        const topLeftData = screenToData({ x: 0, y: 0 });
        const bottomRightData = screenToData({ x: canvasWidth, y: canvasHeight });
        const maxDataRadius = Math.hypot(Math.max(Math.abs(topLeftData.x), Math.abs(bottomRightData.x)), Math.max(Math.abs(topLeftData.y), Math.abs(bottomRightData.y)));

        const drawPolarCircles = (interval, alpha) => {
            if (!interval || alpha < 0.01) return;
            ctx.strokeStyle = `rgba(${baseGridColor.join(',')}, ${alpha * gridAlpha})`;
            ctx.lineWidth = GRID_LINEWIDTH;
            for (let r = interval; r <= maxDataRadius; r += interval) {
                const screenRadius = r * viewTransform.scale / dpr;
                ctx.beginPath();
                ctx.arc(origin.x, origin.y, screenRadius, 0, 2 * Math.PI);
                ctx.stroke();
            }
        };

        drawPolarCircles(lastGridState.interval1, lastGridState.alpha1);
        drawPolarCircles(lastGridState.interval2, lastGridState.alpha2);
        
        const screenRadiusForSpokes = maxDataRadius * viewTransform.scale / dpr;
        
        const drawnAngles = new Set();

        lastAngularGridState.forEach(level => {
            if (level.alpha < 0.01) return;

            ctx.strokeStyle = `rgba(${baseGridColor.join(',')}, ${level.alpha * gridAlpha})`;
            ctx.lineWidth = GRID_LINEWIDTH;
            
            for (let angle = 0; angle < 360; angle += level.angle) {
                if (drawnAngles.has(angle)) continue;

                const rad = angle * Math.PI / 180;
                const endX = origin.x + screenRadiusForSpokes * Math.cos(rad);
                const endY = origin.y + screenRadiusForSpokes * Math.sin(rad);
                ctx.beginPath();
                ctx.moveTo(origin.x, origin.y);
                ctx.lineTo(endX, endY);
                ctx.stroke();
                drawnAngles.add(angle);
            }
        });

    } else {
        const drawGridElements = (interval, alpha) => {
            if (!interval || alpha < 0.01) return;
            const gridElementColor = `rgba(${baseGridColor.join(',')}, ${alpha * gridAlpha})`;
            
            const start = screenToData({ x: 0, y: canvasHeight });
            const end = screenToData({ x: canvasWidth, y: 0 });
            const startTickX = Math.floor(start.x / interval) * interval;
            const endTickX = Math.ceil(end.x / interval) * interval;
            const startTickY = Math.floor(start.y / interval) * interval;
            const endTickY = Math.ceil(end.y / interval) * interval;

            if (gridDisplayMode === 'lines') {
                ctx.strokeStyle = gridElementColor;
                ctx.lineWidth = GRID_LINEWIDTH;
                for (let x = startTickX; x <= endTickX; x += interval) {
                    const screenX = dataToScreen({ x: x, y: 0 }).x;
                    ctx.beginPath();
                    ctx.moveTo(screenX, 0);
                    ctx.lineTo(screenX, canvasHeight);
                    ctx.stroke();
                }
                for (let y = startTickY; y <= endTickY; y += interval) {
                    const screenY = dataToScreen({ x: 0, y: y }).y;
                    ctx.beginPath();
                    ctx.moveTo(0, screenY);
                    ctx.lineTo(canvasWidth, screenY);
                    ctx.stroke();
                }
            } else if (gridDisplayMode === 'points') {
                ctx.fillStyle = gridElementColor;
                const pointRadius = 1.5 * dpr;
                for (let x = startTickX; x <= endTickX; x += interval) {
                    for (let y = startTickY; y <= endTickY; y += interval) {
                        const screenPos = dataToScreen({ x: x, y: y });
                        ctx.beginPath();
                        ctx.arc(screenPos.x, screenPos.y, pointRadius, 0, 2 * Math.PI);
                        ctx.fill();
                    }
                }
            }
        };
        drawGridElements(lastGridState.interval1, lastGridState.alpha1);
        drawGridElements(lastGridState.interval2, lastGridState.alpha2);
    }
    ctx.restore();
}

function drawPolarReferenceCircle(ctx, radius, alpha, axisArrowSize, axisNameFontSize, isFadingCircle = true) {
    if (alpha < 0.01 && isFadingCircle) return; // Only return if fading circle and too transparent

    const origin = dataToScreen({ x: 0, y: 0 });
    const screenRadius = radius * viewTransform.scale / dpr;

    const canvasWidthCSS = canvas.width / dpr;
    const canvasHeightCSS = canvas.height / dpr;

    // Check if the circle is within the canvas view
    if (!isCircleInView(origin.x, origin.y, screenRadius, canvasWidthCSS, canvasHeightCSS)) {
        return;
    }

    const circleColor = `rgba(255, 255, 255, ${alpha * 0.8})`;
    const tickSize = 5;
    const katexFontSize = 10;

    ctx.strokeStyle = circleColor;
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.arc(origin.x, origin.y, screenRadius, 0, 2 * Math.PI);
    ctx.stroke();

    const drawnAngles = new Set();

    lastAngularGridState.forEach(level => {
        const tickAlpha = level.alpha * alpha;
        if (tickAlpha < 0.01) return;

        const finalColor = `rgba(255, 255, 255, ${tickAlpha * 0.8})`;

        for (let deg = 0; deg < 360; deg += level.angle) {
            if (deg === 0 || drawnAngles.has(deg)) continue;

            const angleRad = deg * Math.PI / 180;
            const tickStart = { x: origin.x + (screenRadius - tickSize / 2) * Math.cos(angleRad), y: origin.y - (screenRadius - tickSize / 2) * Math.sin(angleRad) };
            const tickEnd = { x: origin.x + (screenRadius + tickSize / 2) * Math.cos(angleRad), y: origin.y - (screenRadius + tickSize / 2) * Math.sin(angleRad) };
            
            ctx.strokeStyle = finalColor;
            ctx.beginPath();
            ctx.moveTo(tickStart.x, tickStart.y);
            ctx.lineTo(tickEnd.x, tickEnd.y);
            ctx.stroke();
            
            if (deg === 180) {
                const tangentAngle = angleRad - Math.PI / 2;
                ctx.fillStyle = finalColor;
                ctx.beginPath();
                ctx.moveTo(tickEnd.x, tickEnd.y);
                ctx.lineTo(tickEnd.x - axisArrowSize * Math.cos(tangentAngle - Math.PI / 6), tickEnd.y - axisArrowSize * Math.sin(tangentAngle - Math.PI / 6));
                ctx.lineTo(tickEnd.x - axisArrowSize * Math.cos(tangentAngle + Math.PI / 6), tickEnd.y - axisArrowSize * Math.sin(tangentAngle + Math.PI / 6));
                ctx.closePath();
                ctx.fill();
                
                const labelPos = { x: tickEnd.x - axisArrowSize - 10, y: tickEnd.y - axisArrowSize - 10 };
                updateHtmlLabel({ id: `theta-label-${radius}`, content: '\\theta', x: labelPos.x, y: labelPos.y, color: finalColor, fontSize: axisNameFontSize, options: { textAlign: 'right', textBaseline: 'bottom' }});
                labelsToKeepThisFrame.add(`theta-label-${radius}`);
            } else {
                let angleText = '';
                if (angleDisplayMode === 'degrees') {
                    angleText = `${deg}^{\\circ}`;
                } else {
                    const frac = formatFraction(deg/180, 0.001, 6);
                    if (frac !== '0') {
                        angleText = frac === '1' ? `\\pi` : (frac === '-1' ? `-\\pi` : `${frac}\\pi`);
                    }
                }
                
                if (angleText) {
                    const labelRadius = screenRadius + 15;
                    const labelPos = { x: origin.x + labelRadius * Math.cos(angleRad), y: origin.y - labelRadius * Math.sin(angleRad) };
                    updateHtmlLabel({ id: `circ-label-${deg}-${radius.toExponential(15)}`, content: angleText, x: labelPos.x, y: labelPos.y, color: finalColor, fontSize: katexFontSize, options: { textAlign: 'center', textBaseline: 'middle' }});
                    labelsToKeepThisFrame.add(`circ-label-${deg}-${radius.toExponential(15)}`);
                }
            }
            drawnAngles.add(deg);
        }
    });
}

function isCircleInView(circleX, circleY, circleRadius, canvasWidth, canvasHeight) {
    // Check if the circle is completely outside the canvas bounds
    if (circleX + circleRadius < 0 ||
        circleX - circleRadius > canvasWidth ||
        circleY + circleRadius < 0 ||
        circleY - circleRadius > canvasHeight) {
        return false;
    }

    // Check if any part of the circle is inside the canvas
    return true;
}

function calculateGridIntervals(viewTransformScale) {
    const targetScreenSpacing = 140;
    const effectiveDataInterval = targetScreenSpacing / viewTransformScale;

    let lowerPowerOf10 = Math.pow(10, Math.floor(Math.log10(effectiveDataInterval)));
    let higherPowerOf10 = Math.pow(10, Math.ceil(Math.log10(effectiveDataInterval)));

    if (Math.abs(lowerPowerOf10 - higherPowerOf10) < 1e-9 || lowerPowerOf10 === 0) {
        higherPowerOf10 = lowerPowerOf10 === 0 ? 0.001 : lowerPowerOf10 * 10;
        if (lowerPowerOf10 === 0) lowerPowerOf10 = 0.0001;
    }

    const grid1Interval = lowerPowerOf10;
    const grid2Interval = higherPowerOf10;

    let logInterpFactor = 0;
    if (grid2Interval > grid1Interval && grid1Interval > 0) {
        logInterpFactor = (Math.log10(effectiveDataInterval) - Math.log10(grid1Interval)) / (Math.log10(grid2Interval) - Math.log10(grid1Interval));
    }

    const transitionZoneStart = 0.4;
    const transitionZoneEnd = 0.9;

    let interpValue = (logInterpFactor - transitionZoneStart) / (transitionZoneEnd - transitionZoneStart);
    interpValue = Math.max(0, Math.min(1, interpValue));
    interpValue = interpValue * interpValue * (3 - 2 * interpValue);

    let alpha1 = 1 - interpValue;
    let alpha2 = interpValue;

    if (alpha1 < 0.05) alpha1 = 0; else if (alpha1 > 0.95) alpha1 = 1;
    if (alpha2 < 0.05) alpha2 = 0; else if (alpha2 > 0.95) alpha2 = 1;

    const totalAlpha = alpha1 + alpha2;
    if (totalAlpha > 0 && totalAlpha !== 2) {
        alpha1 /= totalAlpha;
        alpha2 /= totalAlpha;
    }

    return { grid1Interval, grid2Interval, alpha1, alpha2 };
}

function getDynamicAngularIntervals(viewTransform, canvasWidth, canvasHeight) {
    const ANGULAR_GRID_LEVELS = [90, 30, 15, 5, 1, 0.1, 0.01];
    const targetScreenSpacing = 80;
    const originScreen = dataToScreen({ x: 0, y: 0 });
    const screenCenter = { x: canvasWidth / 2, y: canvasHeight / 2 };
    const radiusToCenterScreen = distance(originScreen, screenCenter);

    let targetAngleDeg;
    if (radiusToCenterScreen < 1) {
        targetAngleDeg = 90;
    } else {
        const targetAngleRad = targetScreenSpacing / radiusToCenterScreen;
        targetAngleDeg = targetAngleRad * (180 / Math.PI);
    }
    
    if (isNaN(targetAngleDeg)) {
        return [{ angle: 90, alpha: 1 }, { angle: 30, alpha: 1 }];
    }

    const results = [];
    
    // The 90-degree and 30-degree lines are always present as a subtle baseline
    results.push({ angle: 90, alpha: 0.5 });
    results.push({ angle: 30, alpha: 0.4 });

    for (let i = 2; i < ANGULAR_GRID_LEVELS.length; i++) {
        const upperLevel = ANGULAR_GRID_LEVELS[i - 1];
        const lowerLevel = ANGULAR_GRID_LEVELS[i];

        if (targetAngleDeg > upperLevel) continue;
        
        let alpha = 0;
        if (targetAngleDeg <= lowerLevel) {
            alpha = 1.0;
        } else {
            const logUpper = Math.log10(upperLevel);
            const logLower = Math.log10(lowerLevel);
            const logTarget = Math.log10(targetAngleDeg);
            
            let interpValue = (logUpper - logTarget) / (logUpper - logLower);
            interpValue = Math.max(0, Math.min(1, interpValue));
            alpha = interpValue * interpValue * (3 - 2 * interpValue);
        }

        if (alpha > 0.01) {
            results.push({ angle: lowerLevel, alpha: alpha });
        }
    }
    
    return results;
}

function drawAxes(ctx) {
    const axisColor = 'rgba(255, 255, 255, 1)';
    const baseTickLabelColor = [255, 255, 255];
    const baseTickLabelAlpha = 0.9;
    const katexFontSize = 10;
    const axisNameFontSize = 24;
    const axisArrowSize = 12;
    const axisLineWidth = 1.5;
    const tickLineWidth = 1.0;
    const tickSize = 4;

    ctx.save();
    const canvasWidth = canvas.width / dpr;
    const canvasHeight = canvas.height / dpr;
    const origin = dataToScreen({ x: 0, y: 0 });

    const drawAxisWithArrows = (x1, y1, x2, y2) => {
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
        const angle = Math.atan2(y2 - y1, x2 - x1);
        ctx.beginPath();
        ctx.moveTo(x2, y2);
        ctx.lineTo(x2 - axisArrowSize * Math.cos(angle - Math.PI / 6), y2 - axisArrowSize * Math.sin(angle - Math.PI / 6));
        ctx.lineTo(x2 - axisArrowSize * Math.cos(angle + Math.PI / 6), y2 - axisArrowSize * Math.sin(angle + Math.PI / 6));
        ctx.closePath();
        ctx.fill();
    };

    ctx.lineWidth = axisLineWidth;
    ctx.strokeStyle = axisColor;
    ctx.fillStyle = axisColor;

    if (coordsDisplayMode === 'polar') {
        labelsToKeepThisFrame.delete('axis-label-x');
        labelsToKeepThisFrame.delete('axis-label-y');

        const { interval1, interval2, alpha1, alpha2 } = lastGridState;
        const tickColor = `rgba(${baseTickLabelColor.join(',')}, ${baseTickLabelAlpha})`;
        ctx.strokeStyle = tickColor;
        ctx.lineWidth = tickLineWidth;

        const topLeftData = screenToData({ x: 0, y: 0 });
        const bottomRightData = screenToData({ x: canvasWidth, y: canvasHeight });
        const maxRadiusData = Math.hypot(Math.max(Math.abs(topLeftData.x), Math.abs(bottomRightData.x)), Math.max(Math.abs(topLeftData.y), Math.abs(bottomRightData.y))) * 1.1;

        drawAxisWithArrows(origin.x, origin.y, canvasWidth, origin.y);
        updateHtmlLabel({ id: 'axis-label-r-posx', content: 'r', x: canvasWidth - axisArrowSize - 20, y: origin.y + 25, color: axisColor, fontSize: axisNameFontSize, options: { textAlign: 'center', textBaseline: 'top' } });
        labelsToKeepThisFrame.add('axis-label-r-posx');

        drawAxisWithArrows(origin.x, origin.y, 0, origin.y);
        updateHtmlLabel({ id: 'axis-label-r-negx', content: 'r', x: axisArrowSize + 20, y: origin.y + 25, color: axisColor, fontSize: axisNameFontSize, options: { textAlign: 'center', textBaseline: 'top' } });
        labelsToKeepThisFrame.add('axis-label-r-negx');

        drawAxisWithArrows(origin.x, origin.y, origin.x, 0);
        updateHtmlLabel({ id: 'axis-label-r-posy', content: 'r', x: origin.x - 25, y: axisArrowSize + 20, color: axisColor, fontSize: axisNameFontSize, options: { textAlign: 'right', textBaseline: 'middle' } });
        labelsToKeepThisFrame.add('axis-label-r-posy');

        drawAxisWithArrows(origin.x, origin.y, origin.x, canvasHeight);
        updateHtmlLabel({ id: 'axis-label-r-negy', content: 'r', x: origin.x - 25, y: canvasHeight - axisArrowSize - 20, color: axisColor, fontSize: axisNameFontSize, options: { textAlign: 'right', textBaseline: 'middle' } });
        labelsToKeepThisFrame.add('axis-label-r-negy');
        
        const labelOffset = 8;
        const zeroThreshold = 1e-6;

        const drawTicksAndLabelsPolar = (interval, alpha) => {
            if (!interval || alpha < 0.01) return;
            const currentTickLabelColor = `rgba(${baseTickLabelColor.join(',')}, ${baseTickLabelAlpha * alpha})`;
            ctx.strokeStyle = currentTickLabelColor;
            const screenSpacing = interval * viewTransform.scale;
            let sigFigsForLabel = 0;
            if (screenSpacing > 80) sigFigsForLabel = 3;
            else if (screenSpacing > 40) sigFigsForLabel = 2;
            else if (screenSpacing > 20) sigFigsForLabel = 1;
            else sigFigsForLabel = 0;
            const decimalPlacesInInterval = interval > 0 ? -Math.floor(Math.log10(interval)) : 0;
            if (decimalPlacesInInterval > 0) {
                sigFigsForLabel = Math.max(sigFigsForLabel, decimalPlacesInInterval + 1);
            }

            for (let r_data = interval; r_data <= maxRadiusData; r_data += interval) {
                if (Math.abs(r_data) < zeroThreshold) continue;

                const labelText = formatNumber(r_data, sigFigsForLabel);
                
                const p = dataToScreen({ x: r_data, y: 0 });
                ctx.beginPath();
                ctx.moveTo(p.x, origin.y - tickSize / 2);
                ctx.lineTo(p.x, origin.y + tickSize / 2);
                ctx.stroke();
                updateHtmlLabel({
                    id: `polartick-r-x-${r_data.toExponential(15)}`,
                    content: labelText,
                    x: p.x,
                    y: origin.y + tickSize + labelOffset,
                    color: currentTickLabelColor,
                    fontSize: katexFontSize,
                    options: { textAlign: 'center', textBaseline: 'top' }
                });
                labelsToKeepThisFrame.add(`polartick-r-x-${r_data.toExponential(15)}`);

                const pNegX = dataToScreen({ x: -r_data, y: 0 });
                ctx.beginPath();
                ctx.moveTo(pNegX.x, origin.y - tickSize / 2);
                ctx.lineTo(pNegX.x, origin.y + tickSize / 2);
                ctx.stroke();
                updateHtmlLabel({
                    id: `polartick-r-negx-${r_data.toExponential(15)}`,
                    content: labelText,
                    x: pNegX.x,
                    y: origin.y + tickSize + labelOffset,
                    color: currentTickLabelColor,
                    fontSize: katexFontSize,
                    options: { textAlign: 'center', textBaseline: 'top' }
                });
                labelsToKeepThisFrame.add(`polartick-r-negx-${r_data.toExponential(15)}`);

                const pPosY = dataToScreen({ x: 0, y: r_data });
                ctx.beginPath();
                ctx.moveTo(origin.x - tickSize / 2, pPosY.y);
                ctx.lineTo(origin.x + tickSize / 2, pPosY.y);
                ctx.stroke();
                updateHtmlLabel({
                    id: `polartick-r-posy-${r_data.toExponential(15)}`,
                    content: labelText,
                    x: origin.x - tickSize - labelOffset,
                    y: pPosY.y,
                    color: currentTickLabelColor,
                    fontSize: katexFontSize,
                    options: { textAlign: 'right', textBaseline: 'middle' }
                });
                labelsToKeepThisFrame.add(`polartick-r-posy-${r_data.toExponential(15)}`);

                const pNegY = dataToScreen({ x: 0, y: -r_data });
                ctx.beginPath();
                ctx.moveTo(origin.x - tickSize / 2, pNegY.y);
                ctx.lineTo(origin.x + tickSize / 2, pNegY.y);
                ctx.stroke();
                updateHtmlLabel({
                    id: `polartick-r-negy-${r_data.toExponential(15)}`,
                    content: labelText,
                    x: origin.x - tickSize - labelOffset,
                    y: pNegY.y,
                    color: currentTickLabelColor,
                    fontSize: katexFontSize,
                    options: { textAlign: 'right', textBaseline: 'middle' }
                });
                labelsToKeepThisFrame.add(`polartick-r-negy-${r_data.toExponential(15)}`);
            }
        };

        drawTicksAndLabelsPolar(interval1, alpha1);
        drawTicksAndLabelsPolar(interval2, alpha2);

        const idealScreenRadius = Math.min(canvasWidth, canvasHeight) * 0.35;
        const idealDataRadius = idealScreenRadius / viewTransform.scale;
        const persistentRadius = Math.pow(10, Math.round(Math.log10(idealDataRadius)));
        
        drawPolarReferenceCircle(ctx, persistentRadius, 1.0, axisArrowSize, axisNameFontSize);
        
    } else {
        labelsToKeepThisFrame.delete('axis-label-r-posx');
        labelsToKeepThisFrame.delete('axis-label-r-negx');
        labelsToKeepThisFrame.delete('axis-label-r-posy');
        labelsToKeepThisFrame.delete('axis-label-r-negy');
        labelsToKeepThisFrame.delete('theta-label');
        for (let r = 0; r <= (Math.max(canvasWidth, canvasHeight) / viewTransform.scale) + lastGridState.interval2; r += lastGridState.interval2) {
            labelsToKeepThisFrame.delete(`polartick-r-x-${r.toExponential(15)}`);
            labelsToKeepThisFrame.delete(`polartick-r-negx-${r.toExponential(15)}`);
            labelsToKeepThisFrame.delete(`polartick-r-posy-${r.toExponential(15)}`);
            labelsToKeepThisFrame.delete(`polartick-r-negy-${r.toExponential(15)}`);
            labelsToKeepThisFrame.delete(`circ-label-0-${r.toExponential(15)}`);
            labelsToKeepThisFrame.delete(`circ-label-90-${r.toExponential(15)}`);
            labelsToKeepThisFrame.delete(`circ-label-180-${r.toExponential(15)}`);
            labelsToKeepThisFrame.delete(`circ-label-270-${r.toExponential(15)}`);
            labelsToKeepThisFrame.delete(`circ-label-360-${r.toExponential(15)}`);
        }

        if (origin.y > 0 && origin.y < canvasHeight) drawAxisWithArrows(0, origin.y, canvasWidth, origin.y);
        if (origin.x > 0 && origin.x < canvasWidth) drawAxisWithArrows(origin.x, canvasHeight, origin.x, 0);

        let xLabel = 'x';
        let yLabel = 'y';
        if (coordsDisplayMode === 'complex') {
            xLabel = '\\mathrm{Re}';
            yLabel = '\\mathrm{Im}';
        }
        updateHtmlLabel({ id: 'axis-label-x', content: xLabel, x: canvasWidth - axisArrowSize - 20, y: origin.y + 25, color: axisColor, fontSize: axisNameFontSize, options: { textAlign: 'center', textBaseline: 'top' } });
        labelsToKeepThisFrame.add('axis-label-x');
        updateHtmlLabel({ id: 'axis-label-y', content: yLabel, x: origin.x - 25, y: axisArrowSize + 20, color: axisColor, fontSize: axisNameFontSize, options: { textAlign: 'right', textBaseline: 'middle' } });
        labelsToKeepThisFrame.add('axis-label-y');

        const drawTicksAndLabelsRectilinear = (interval, alpha) => {
            if (!interval || alpha < 0.01) return;
            const tickLabelColor = `rgba(${baseTickLabelColor.join(',')}, ${baseTickLabelAlpha * alpha})`;
            ctx.strokeStyle = tickLabelColor;
            ctx.lineWidth = tickLineWidth;
            const screenSpacing = interval * viewTransform.scale;
            let sigFigsForLabel = 0;
            if (screenSpacing > 80) sigFigsForLabel = 3;
            else if (screenSpacing > 40) sigFigsForLabel = 2;
            else if (screenSpacing > 20) sigFigsForLabel = 1;
            else sigFigsForLabel = 0;
            const decimalPlacesInInterval = interval > 0 ? -Math.floor(Math.log10(interval)) : 0;
            if (decimalPlacesInInterval > 0) {
                sigFigsForLabel = Math.max(sigFigsForLabel, decimalPlacesInInterval + 1);
            }
            const topLeftData = screenToData({ x: 0, y: 0 });
            const bottomRightData = screenToData({ x: canvasWidth, y: canvasHeight });
            const getStableId = (prefix, num) => `${prefix}-${num.toExponential(15)}`;
            const zeroThreshold = interval * 1e-6;
            const startTickX = Math.floor(topLeftData.x / interval) * interval;
            const endTickX = Math.ceil(bottomRightData.x / interval) * interval;
            const startTickY = Math.floor(bottomRightData.y / interval) * interval;
            const endTickY = Math.ceil(topLeftData.y / interval) * interval;
            for (let x_data = startTickX; x_data <= endTickX; x_data += interval) {
                if (Math.abs(x_data) < zeroThreshold) continue;
                const screenX = dataToScreen({ x: x_data, y: 0 }).x;
                ctx.beginPath(); ctx.moveTo(screenX, origin.y); ctx.lineTo(screenX, origin.y + tickSize); ctx.stroke();
                updateHtmlLabel({ id: getStableId('tick-label-x', x_data), content: formatNumber(x_data, sigFigsForLabel), x: screenX, y: origin.y + tickSize + 8, color: tickLabelColor, fontSize: katexFontSize, options: { textAlign: 'center', textBaseline: 'top' } });
                labelsToKeepThisFrame.add(getStableId('tick-label-x', x_data));
            }
            for (let y_data = startTickY; y_data <= endTickY; y_data += interval) {
                if (Math.abs(y_data) < zeroThreshold) continue;
                const screenY = dataToScreen({ x: 0, y: y_data }).y;
                let yLabelContent = formatNumber(y_data, sigFigsForLabel);
                if (coordsDisplayMode === 'complex' && yLabelContent !== "0") yLabelContent += 'i';
                ctx.beginPath(); ctx.moveTo(origin.x, screenY); ctx.lineTo(origin.x - tickSize, screenY); ctx.stroke();
                updateHtmlLabel({ id: getStableId('tick-label-y', y_data), content: yLabelContent, x: origin.x - tickSize - 5, y: screenY, color: tickLabelColor, fontSize: katexFontSize, options: { textAlign: 'right', textBaseline: 'middle' } });
                labelsToKeepThisFrame.add(getStableId('tick-label-y', y_data));
            }
        };
        drawTicksAndLabelsRectilinear(lastGridState.interval1, lastGridState.alpha1);
        drawTicksAndLabelsRectilinear(lastGridState.interval2, lastGridState.alpha2);
    }
    ctx.restore();
}


function performEscapeAction() {
    selectedPointIds = [];
    selectedEdgeIds = [];
    selectedCenterIds = [];
    activeCenterId = null;
    isDrawingMode = false;
    previewLineStartPointId = null;
    frozenReference_A_rad = null;
    frozenReference_A_baseRad = null;
    frozenReference_D_du = null;
    frozenReference_D_g2g = null;
    frozenReference_Origin_Data = null;
    isActionInProgress = false;
    isDragConfirmed = false;
    isRectangleSelecting = false;
    isEdgeTransformDrag = false;
    isDraggingCenter = false;
    isPanningBackground = false;
    dragPreviewPoints = [];
    actionTargetPoint = null;
    currentMouseButton = -1;
    clickData = { pointId: null, count: 0, timestamp: 0 };
    canvas.style.cursor = 'crosshair';
    transformIndicatorData = null;
    drawingSequence = [];
    currentSequenceIndex = 0;
}

function handleRepeat() {
    if (!isDrawingMode || !previewLineStartPointId || drawingSequence.length === 0) {
        return;
    }

    saveStateForUndo();

    const lastPoint = findPointById(previewLineStartPointId);
    if (!lastPoint) {
        console.error("handleRepeat: Last point not found. Cannot repeat.");
        performEscapeAction();
        return;
    }

    const precedingSegmentOfLastPoint = getPrecedingSegment(lastPoint.id);
    if (!precedingSegmentOfLastPoint) {
        console.error("handleRepeat: No preceding segment found for lastPoint, but drawingSequence is not empty. Aborting repeat.");
        performEscapeAction();
        return;
    }
    const currentAbsoluteDirection = precedingSegmentOfLastPoint.angleRad;

    // For the repeat pattern, we only use segments starting from index 1 (skipping the first segment)
    // If we only have the first segment, we can't repeat yet
    if (drawingSequence.length === 1) {
        console.log("handleRepeat: Only first segment exists, cannot repeat pattern yet.");
        return;
    }

    // Get the pattern step from the repeating portion (starting from index 1)
    const repeatPatternLength = drawingSequence.length - 1;
    const patternStepIndex = ((currentSequenceIndex - 1) % repeatPatternLength) + 1;
    const patternStep = drawingSequence[patternStepIndex];
    
    console.log("=== REPEAT DEBUG ===");
    console.log("drawingSequence:", drawingSequence);
    console.log("currentSequenceIndex:", currentSequenceIndex);
    console.log("repeatPatternLength:", repeatPatternLength);
    console.log("patternStepIndex:", patternStepIndex);
    console.log("patternStep:", patternStep);
    
    const lengthToDraw = patternStep.length;
    // For repeating patterns, the last segment (which has turn=0 as placeholder) 
    // should use the same turn as the first segment in the repeating cycle
    let turnToApplyForNextSegment;
    if (patternStepIndex === drawingSequence.length - 1) {
        // We're at the last segment - its turn is just a placeholder 0
        // Use the turn from the first segment of the repeating pattern (index 1, or index 0 if only 2 total)
        const firstRepeatSegmentIndex = drawingSequence.length > 2 ? 1 : 0;
        turnToApplyForNextSegment = drawingSequence[firstRepeatSegmentIndex].turn;
        console.log("Last segment - using turn from segment", firstRepeatSegmentIndex, ":", turnToApplyForNextSegment, "radians");
    } else {
        // Use the established turn for this segment
        turnToApplyForNextSegment = patternStep.turn;
        console.log("Using established turn from pattern step:", turnToApplyForNextSegment, "radians");
    }
        
    console.log("lengthToDraw:", lengthToDraw);
    console.log("turnToApplyForNextSegment (radians):", turnToApplyForNextSegment);
    console.log("turnToApplyForNextSegment (degrees):", turnToApplyForNextSegment * 180 / Math.PI);
    
    // Cycle through colors just like we cycle through angles
    // For proper alternating pattern, determine which color position we should be at
    let colorForNewPoint;
    let colorForCurrentPoint;
    
    if (patternStepIndex === drawingSequence.length - 1) {
        // We're at the last segment - figure out the proper alternating pattern
        // Based on the established pattern (segments 0 and 1), determine what colors should be
        const establishedColors = [drawingSequence[0].endPointColor, drawingSequence[1].endPointColor];
        
        // For the current point (where we're standing), use the alternating pattern
        const currentColorIndex = (currentSequenceIndex - 1) % establishedColors.length;
        colorForCurrentPoint = establishedColors[currentColorIndex];
        
        // For the new point, use the next color in the alternating pattern
        const newColorIndex = currentSequenceIndex % establishedColors.length;
        colorForNewPoint = establishedColors[newColorIndex];
        
        console.log("Last segment - alternating pattern:");
        console.log("Current point color should be:", colorForCurrentPoint);
        console.log("New point color should be:", colorForNewPoint);
        
        // Update the current point's color to match the pattern
        lastPoint.color = colorForCurrentPoint;
    } else {
        // Use the color that corresponds to this pattern step's position
        colorForNewPoint = patternStep.endPointColor;
        console.log("Using color from current pattern step:", colorForNewPoint);
    }

    // Calculate the new point's absolute angle
    const newSegmentAbsoluteAngle = normalizeAngle(currentAbsoluteDirection + turnToApplyForNextSegment);
    
    const targetX = lastPoint.x + lengthToDraw * Math.cos(newSegmentAbsoluteAngle);
    const targetY = lastPoint.y + lengthToDraw * Math.sin(newSegmentAbsoluteAngle);

    let newPoint = null;
    let merged = false;
    const mergeRadiusData = POINT_SELECT_RADIUS / viewTransform.scale;

    for (const p of allPoints) {
        if (p.type === 'regular' && distance({ x: targetX, y: targetY }, p) < mergeRadiusData) {
            newPoint = p;
            merged = true;
            break;
        }
    }

    if (!merged) {
        newPoint = { id: generateUniqueId(), x: targetX, y: targetY, type: 'regular', color: colorForNewPoint };
        allPoints.push(newPoint);
    }

    const edgeExists = allEdges.some(e => 
        (e.id1 === lastPoint.id && e.id2 === newPoint.id) || 
        (e.id2 === lastPoint.id && e.id1 === newPoint.id)
    );
    if (!edgeExists) {
        allEdges.push({ id1: lastPoint.id, id2: newPoint.id });
    }

    previewLineStartPointId = newPoint.id;
    
    // Update sequence index for next repeat
    currentSequenceIndex++;
    if (currentSequenceIndex >= drawingSequence.length) {
        currentSequenceIndex = 1; // Reset to start of repeat pattern (skipping first segment)
    }

    frozenReference_D_du = null;
    frozenReference_D_g2g = null;
    frozenReference_A_rad = null;
    frozenReference_A_baseRad = null;
    frozenReference_Origin_Data = null;
}

canvas.addEventListener('wheel', (event) => {
    event.preventDefault();
    const mouseScreen = getMousePosOnCanvas(event, canvas);
    const scaleFactor = event.deltaY > 0 ? 1/1.15 : 1.15;
    zoomAt(mouseScreen, scaleFactor);
});

canvas.addEventListener('mouseenter', () => {
    isMouseOverCanvas = true;
});

canvas.addEventListener('mouseleave', () => {
    isMouseOverCanvas = false;
    redrawAll(); // To hide the mouse coordinates
});

canvas.addEventListener('contextmenu', (event) => event.preventDefault());

canvas.addEventListener('mousemove', (event) => {
    mousePos = getMousePosOnCanvas(event, canvas);
    currentShiftPressed = event.shiftKey;
    lastSnapResult = null; // Reset on each mousemove
    placingSnapPos = null; // Reset on each mousemove
    ghostPointPosition = null; // Reset ghost position at the start of the frame to ensure it's re-evaluated

    // Determine ghostPointPosition based on shift-press and current context
    if (currentShiftPressed) {
        const mouseDataPos = screenToData(mousePos);
        let potentialSnapPos = null; // This will hold the data position from snapping functions

        if (isPlacingTransform) {
            // When placing a transform center, the ghost snaps to grid or existing points.
            potentialSnapPos = getBestSnapPosition(mouseDataPos);
            if (potentialSnapPos) {
                placingSnapPos = dataToScreen(potentialSnapPos); // Visual cue for transform placement
            }
        } else if (isDrawingMode && previewLineStartPointId) {
            // When drawing a line, the ghost shows the snapped end point of the line.
            const startPoint = findPointById(previewLineStartPointId);
            if (startPoint) {
                const snappedData = getSnappedPosition(startPoint, mousePos, currentShiftPressed);
                potentialSnapPos = { x: snappedData.x, y: snappedData.y };
            }
        } else if (!isActionInProgress) {
            // For general canvas interaction (not drawing, not dragging, not placing transform),
            // the ghost snaps to common points/grid.
            potentialSnapPos = getBestSnapPosition(mouseDataPos);
        }

        // IMPORTANT: Always set ghostPointPosition to either the snapped position or the raw mouse position.
        // This ensures the ghost is always visible when Shift is pressed.
        if (potentialSnapPos) {
            ghostPointPosition = potentialSnapPos;
        } else {
            // Fallback to raw mouse position if no snap candidates were found by the respective functions.
            // This ensures the ghost is ALWAYS visible when Shift is down.
            ghostPointPosition = mouseDataPos; 
        }
    }

    // Handle ongoing actions (dragging, panning, rectangle selecting)
    if (!isActionInProgress) {
        return;
    }

    if (!isDragConfirmed && distance(mousePos, actionStartPos) > DRAG_THRESHOLD) {
        isDragConfirmed = true;
        isEdgeTransformDrag = false;

        if (currentMouseButton === 2) {
            isRectangleSelecting = true;
            return;
        }
        
        const { target, targetPoint, targetEdge, shiftKey, ctrlKey } = actionContext;

        if (isDraggingCenter) {
            initialDragPointStates = JSON.parse(JSON.stringify([targetPoint]));
            dragPreviewPoints = JSON.parse(JSON.stringify([targetPoint]));
            canvas.style.cursor = 'grabbing';
        }
        else if (targetEdge) {
            if (activeCenterId) isEdgeTransformDrag = true;

            const pointIdsToAffect = new Set(selectedPointIds);
            selectedEdgeIds.forEach(edgeId => {
                const edge = allEdges.find(e => getEdgeId(e) === edgeId);
                if(edge) {
                    pointIdsToAffect.add(edge.id1);
                    pointIdsToAffect.add(edge.id2);
                }
            });
            pointIdsToAffect.add(targetEdge.id1);
            pointIdsToAffect.add(targetEdge.id2);

            const pointsToDrag = Array.from(pointIdsToAffect).map(id => findPointById(id)).filter(Boolean);

            if (pointsToDrag.length > 0) {
                initialDragPointStates = JSON.parse(JSON.stringify(pointsToDrag));
                dragPreviewPoints = JSON.parse(JSON.stringify(pointsToDrag));
                canvas.style.cursor = 'grabbing';
            }
        }
        else if (target !== 'canvas') {
            actionTargetPoint = targetPoint;
            if (targetPoint?.type !== 'regular') {
                if (targetPoint) handleCenterSelection(targetPoint.id, shiftKey, ctrlKey);
            } else if (targetPoint && !selectedPointIds.includes(targetPoint.id)) {
                applySelectionLogic([targetPoint.id], [], shiftKey, ctrlKey, false);
            }

            let pointsToDragIds = new Set([...selectedPointIds, ...selectedCenterIds]);
            if (targetPoint && !pointsToDragIds.has(targetPoint.id)) {
                pointsToDragIds = new Set([targetPoint.id]);
                if (targetPoint.type === 'regular') {
                    selectedPointIds = [targetPoint.id];
                    selectedCenterIds = [];
                } else {
                    selectedPointIds = [];
                    selectedCenterIds = [targetPoint.id];
                }
                activeCenterId = selectedCenterIds.at(-1) ?? null;
            }
            const pointsToDrag = Array.from(pointsToDragIds).map(id => findPointById(id)).filter(Boolean);
            if (pointsToDrag.length > 0) {
                initialDragPointStates = JSON.parse(JSON.stringify(pointsToDrag));
                dragPreviewPoints = JSON.parse(JSON.stringify(pointsToDrag));
                canvas.style.cursor = 'grabbing';
            }
        }
        else if (currentMouseButton === 0) {
            isPanningBackground = true;
            backgroundPanStartOffset = { x: viewTransform.offsetX, y: viewTransform.offsetY };
            canvas.style.cursor = 'move';
        }
    }

    if (isDragConfirmed) {
        const isTransformingSelection = activeCenterId && selectedPointIds.length > 0;

        if (isPanningBackground) {
            const deltaX_css = mousePos.x - actionStartPos.x;
            const deltaY_css = mousePos.y - actionStartPos.y;
            viewTransform.offsetX = backgroundPanStartOffset.x + (deltaX_css * dpr);
            viewTransform.offsetY = backgroundPanStartOffset.y - (deltaY_css * dpr);
        } else if (isDraggingCenter) {
            const mouseData = screenToData(mousePos);
            const startMouseData = screenToData(actionStartPos);
            let finalDelta = { x: mouseData.x - startMouseData.x, y: mouseData.y - startMouseData.y };
            if (currentShiftPressed) {
                const targetSnapPos = { x: initialDragPointStates[0].x + finalDelta.x, y: initialDragPointStates[0].y + finalDelta.y };
                const snapResult = getDragSnapPosition(initialDragPointStates[0], targetSnapPos);
                if (snapResult.snapped) {
                    finalDelta = { x: snapResult.point.x - initialDragPointStates[0].x, y: snapResult.point.y - initialDragPointStates[0].y };
                }
            }
            dragPreviewPoints[0].x = initialDragPointStates[0].x + finalDelta.x;
            dragPreviewPoints[0].y = initialDragPointStates[0].y + finalDelta.y;
        }
        else if (isTransformingSelection || isEdgeTransformDrag) {
            const center = findPointById(activeCenterId);
            let startReferencePoint;
            if (isEdgeTransformDrag) {
                startReferencePoint = screenToData(actionStartPos);
            } else {
                const referencePoint = actionTargetPoint?.type === 'regular' ? actionTargetPoint : initialDragPointStates.find(p => selectedPointIds.includes(p.id));
                startReferencePoint = initialDragPointStates.find(p => p.id === referencePoint.id);
            }

            if (!center || !startReferencePoint) return;

            const mouseData = screenToData(mousePos);
            const centerType = center.type;
            let rotation, scale, finalMouseData, isSnapping, snappedScaleValue;
            isSnapping = false;
            snappedScaleValue = null;
            finalMouseData = mouseData;

            if (currentShiftPressed) {
                const snapResult = getTransformSnap(center, mouseData, startReferencePoint, centerType);
                if (snapResult.snapped) {
                    isSnapping = true;
                    finalMouseData = snapResult.pos;
                    rotation = snapResult.rotation;
                    scale = snapResult.scale;
                    snappedScaleValue = snapResult.pureScaleForDisplay;
                }
            }
            
            if (!isSnapping) {
                const startVector = { x: startReferencePoint.x - center.x, y: startReferencePoint.y - center.y };
                const currentVector = { x: mouseData.x - center.x, y: mouseData.y - center.y };
                const startDist = Math.hypot(startVector.x, startVector.y);
                const currentDist = Math.hypot(currentVector.x, currentVector.y);
                const startAngle = Math.atan2(startVector.y, startVector.x);
                const currentAngle = Math.atan2(currentVector.y, currentVector.x);
                rotation = normalizeAngleToPi(currentAngle - startAngle);
                scale = (startDist < GEOMETRY_CALCULATION_EPSILON) ? 1 : currentDist / startDist;
            }
        
            if (centerType === 'center_rotate_only') scale = 1.0;
            if (centerType === 'center_scale_only') rotation = 0.0;
        
            transformIndicatorData = { center, startPos: startReferencePoint, currentPos: finalMouseData, rotation, scale, isSnapping, snappedScaleValue, transformType: centerType };
        
            initialDragPointStates.forEach(p_initial => {
                if (!p_initial) return;
                const p_preview = dragPreviewPoints.find(p => p && p.id === p_initial.id);
                if (!p_preview) return;
                const initialPointVector = { x: p_initial.x - center.x, y: p_initial.y - center.y };
                let transformedVector = { ...initialPointVector };
                if (centerType !== 'center_rotate_only') {
                    transformedVector.x *= scale;
                    transformedVector.y *= scale;
                }
                if (centerType !== 'center_scale_only') {
                    const x = transformedVector.x;
                    const y = transformedVector.y;
                    transformedVector.x = x * Math.cos(rotation) - y * Math.sin(rotation);
                    transformedVector.y = x * Math.sin(rotation) + y * Math.cos(rotation);
                }
                p_preview.x = center.x + transformedVector.x;
                p_preview.y = center.y + transformedVector.y;
            });
        }
        else if (dragPreviewPoints.length > 0) {
            const mouseData = screenToData(mousePos);
            const startMouseData = screenToData(actionStartPos);
            let finalDelta = { x: mouseData.x - startMouseData.x, y: mouseData.y - startMouseData.y };
            if (currentShiftPressed && actionTargetPoint) {
                const dragOrigin = actionTargetPoint.type === 'regular' ? initialDragPointStates.find(p => p && p.id === actionTargetPoint.id) : null;
                if (dragOrigin) {
                    const targetSnapPos = { x: dragOrigin.x + finalDelta.x, y: dragOrigin.y + finalDelta.y };
                    const snapResult = getDragSnapPosition(dragOrigin, targetSnapPos);
                    if (snapResult.snapped) {
                        finalDelta = { x: snapResult.point.x - dragOrigin.x, y: snapResult.point.y - dragOrigin.y };
                    }
                    lastSnapResult = snapResult;
                }
            }
            initialDragPointStates.forEach(originalPointState => {
                if (!originalPointState) return;
                const previewPointToUpdate = dragPreviewPoints.find(dp => dp && dp.id === originalPointState.id);
                if (previewPointToUpdate) {
                    previewPointToUpdate.x = originalPointState.x + finalDelta.x;
                    previewPointToUpdate.y = originalPointState.y + finalDelta.y;
                }
            });
        }
    }
});

canvas.addEventListener('mousedown', (event) => {
    mousePos = getMousePosOnCanvas(event, canvas);
    isDraggingCenter = false; // Reset on each new click

    if (handleCanvasUIClick(mousePos)) {
        return;
    }

    if (isDrawingMode && event.button === 2) {
        performEscapeAction();
        return;
    }

    if (isPlacingTransform) {
        if (event.button === 0) { // Left-click: Place the transform object.
            saveStateForUndo();
            const finalPlacePos = placingSnapPos || mousePos;
            const dataPos = screenToData(finalPlacePos);
            const newCenter = {
                id: generateUniqueId(),
                x: dataPos.x,
                y: dataPos.y,
                type: placingTransformType,
                color: 'white'
            };
            allPoints.push(newCenter);
            handleCenterSelection(newCenter.id, false, false);
        } else if (event.button === 2) { // Right-click: Cancel the placement tool.
            isPlacingTransform = false;
            placingTransformType = null;
            placingSnapPos = null;
        }
        return;
    }

    const clickedPoint = findClickedPoint(mousePos);
    let clickedEdge = findClickedEdge(mousePos);

    if (clickedPoint) {
        clickedEdge = null; // Prioritize point clicks over edge clicks
        if (clickedPoint.type !== 'regular') {
            isDraggingCenter = true;
            // When clicking a center, just manage its selection state.
            // Do not clear the selection of regular points.
            handleCenterSelection(clickedPoint.id, event.shiftKey, event.ctrlKey || event.metaKey);
        }
    }

    isActionInProgress = true;
    isDragConfirmed = false;
    isPanningBackground = false;
    isRectangleSelecting = false;
    initialDragPointStates = [];
    dragPreviewPoints = [];
    currentMouseButton = event.button;
    actionStartPos = mousePos;
    rectangleSelectStartPos = actionStartPos;

    actionContext = {
        targetPoint: clickedPoint,
        targetEdge: clickedEdge,
        target: clickedPoint || clickedEdge || 'canvas',
        shiftKey: event.shiftKey,
        ctrlKey: event.ctrlKey || event.metaKey,
    };

    if (event.altKey) {
        if (clickedPoint && clickedPoint.type === 'regular') {
            saveStateForUndo();
            performEscapeAction();
            isDrawingMode = true;
            previewLineStartPointId = clickedPoint.id;
            isActionInProgress = false;
            return;
        } else if (clickedEdge) {
            saveStateForUndo();
            performEscapeAction();
            const p1 = findPointById(clickedEdge.id1);
            const p2 = findPointById(clickedEdge.id2);
            if (p1 && p2) {
                const closest = getClosestPointOnLineSegment(screenToData(actionStartPos), p1, p2);
                const newPoint = { id: generateUniqueId(), x: closest.x, y: closest.y, type: 'regular', color: currentColor };
                allPoints.push(newPoint);
                allEdges = allEdges.filter(e => getEdgeId(e) !== getEdgeId(clickedEdge));
                allEdges.push({ id1: p1.id, id2: newPoint.id });
                allEdges.push({ id1: newPoint.id, id2: p2.id });
                isDrawingMode = true;
                previewLineStartPointId = newPoint.id;
                isActionInProgress = false;
            }
            return;
        }
    }
});

canvas.addEventListener('mouseup', (event) => {
    if (!isActionInProgress) return;

    const { shiftKey, ctrlKey, targetPoint, targetEdge, target } = actionContext;

    if (isDragConfirmed) {
        if (isRectangleSelecting) {
            const dataP1 = screenToData({ x: Math.min(actionStartPos.x, mousePos.x), y: Math.min(actionStartPos.y, mousePos.y) });
            const dataP2 = screenToData({ x: Math.max(actionStartPos.x, mousePos.x), y: Math.max(actionStartPos.y, mousePos.y) });
            const minX = Math.min(dataP1.x, dataP2.x),
                maxX = Math.max(dataP1.x, dataP2.x);
            const minY = Math.min(dataP1.y, dataP2.y),
                maxY = Math.max(dataP1.y, dataP2.y);

            const pointsInRect = allPoints.filter(p => p.type === 'regular' && p.x >= minX && p.x <= maxX && p.y >= minY && p.y <= maxY).map(p => p.id);
            const centersInRect = allPoints.filter(p => p.type !== 'regular' && p.x >= minX && p.x <= maxX && p.y >= minY && p.y <= maxY).map(p => p.id);

            if (!shiftKey && !ctrlKey) {
                selectedPointIds = pointsInRect;
                selectedEdgeIds = allEdges.filter(e => pointsInRect.includes(e.id1) && pointsInRect.includes(e.id2)).map(e => getEdgeId(e));
                selectedCenterIds = centersInRect;
            } else {
                if (shiftKey) {
                    selectedPointIds = [...new Set([...selectedPointIds, ...pointsInRect])];
                    const edgesInRect = allEdges.filter(e => pointsInRect.includes(e.id1) && pointsInRect.includes(e.id2)).map(e => getEdgeId(e));
                    selectedEdgeIds = [...new Set([...selectedEdgeIds, ...edgesInRect])];
                    selectedCenterIds = [...new Set([...selectedCenterIds, ...centersInRect])];
                } else {
                    pointsInRect.forEach(id => { const i = selectedPointIds.indexOf(id); if (i > -1) selectedPointIds.splice(i, 1); else selectedPointIds.push(id); });
                    centersInRect.forEach(id => { const i = selectedCenterIds.indexOf(id); if (i > -1) selectedCenterIds.splice(i, 1); else selectedCenterIds.push(id); });
                }
            }
            activeCenterId = selectedCenterIds.at(-1) ?? null;

        } else if (isPanningBackground) {
        }
        else if (dragPreviewPoints.length > 0) {
            let didMerge = false;
            if (targetPoint && targetPoint.type === 'regular' && dragPreviewPoints.length === 1 && dragPreviewPoints[0].id === targetPoint.id) {
                const finalDropPos = dragPreviewPoints[0];
                let mergeTargetPoint = null;
                const mergeRadiusData = POINT_SELECT_RADIUS / viewTransform.scale;

                for (const p of allPoints) {
                    if (p.id !== targetPoint.id && p.type === 'regular' && distance({ x: finalDropPos.x, y: finalDropPos.y }, p) < mergeRadiusData) {
                        mergeTargetPoint = p;
                        break;
                    }
                }

                if (mergeTargetPoint) {
                    didMerge = true;
                    saveStateForUndo();
                    const pointToDeleteId = targetPoint.id;
                    const pointToKeepId = mergeTargetPoint.id;
                    const edgesToRewire = allEdges.filter(edge => edge.id1 === pointToDeleteId || edge.id2 === pointToDeleteId);
                    const newEdges = [];
                    for (const edge of edgesToRewire) {
                        const otherEndId = (edge.id1 === pointToDeleteId) ? edge.id2 : edge.id1;
                        if (otherEndId !== pointToKeepId) {
                            const edgeAlreadyExists = allEdges.some(e => (e.id1 === pointToKeepId && e.id2 === otherEndId) || (e.id2 === pointToKeepId && e.id1 === otherEndId));
                            if (!edgeAlreadyExists) newEdges.push({ id1: pointToKeepId, id2: otherEndId });
                        }
                    }
                    allEdges = allEdges.filter(edge => edge.id1 !== pointToDeleteId && edge.id2 !== pointToDeleteId);
                    allPoints = allPoints.filter(p => p.id !== pointToDeleteId);
                    selectedPointIds = selectedPointIds.filter(id => id !== pointToDeleteId);
                    if (!selectedPointIds.includes(pointToKeepId)) {
                        selectedPointIds.push(pointToKeepId);
                    }
                    allEdges.push(...newEdges);
                }
            }
            if (!didMerge) {
                saveStateForUndo();
                dragPreviewPoints.forEach(dp => {
                    if (dp) {
                        const p = allPoints.find(point => point.id === dp.id);
                        if (p) {
                            p.x = dp.x;
                            p.y = dp.y;
                        }
                    }
                });
            }
        }
    } else {
        if (currentMouseButton === 0) {
            const startPoint = findPointById(previewLineStartPointId);
            if (isDrawingMode && startPoint) {
                saveStateForUndo();
                let newPoint = null;
                const snappedDataForCompletedSegment = getSnappedPosition(startPoint, mousePos, shiftKey);

                if (targetPoint && targetPoint.type === 'regular' && targetPoint.id !== startPoint.id) {
                    const edgeExists = allEdges.some(e => (e.id1 === startPoint.id && e.id2 === targetPoint.id) || (e.id2 === startPoint.id && e.id1 === targetPoint.id));
                    if (!edgeExists) allEdges.push({ id1: startPoint.id, id2: targetPoint.id });
                    newPoint = targetPoint;
                } else if (targetEdge) {
                    const p1 = findPointById(targetEdge.id1);
                    const p2 = findPointById(targetEdge.id2);
                    if (p1 && p2) {
                        const closest = getClosestPointOnLineSegment(screenToData(mousePos), p1, p2);
                        newPoint = { id: generateUniqueId(), x: closest.x, y: closest.y, type: 'regular', color: currentColor };
                        allPoints.push(newPoint);
                        allEdges = allEdges.filter(e => getEdgeId(e) !== getEdgeId(targetEdge));
                        allEdges.push({ id1: p1.id, id2: newPoint.id }, { id1: newPoint.id, id2: p2.id }, { id1: startPoint.id, id2: newPoint.id });
                    }
                } else {
                    newPoint = { id: generateUniqueId(), x: snappedDataForCompletedSegment.x, y: snappedDataForCompletedSegment.y, type: 'regular', color: currentColor };
                    allPoints.push(newPoint);
                    allEdges.push({ id1: startPoint.id, id2: newPoint.id });
                }

                if (newPoint) {
                    const completedSegmentProps = getCompletedSegmentProperties(startPoint, newPoint, allEdges);
                    if (completedSegmentProps) {
                        if (drawingSequence.length > 0) {
                            drawingSequence[drawingSequence.length - 1].turn = completedSegmentProps.turnAngleRad;
                        }
                        drawingSequence.push({
                            length: completedSegmentProps.length,
                            turn: 0, 
                            endPointColor: newPoint.color
                        });
                        currentSequenceIndex = drawingSequence.length - 1;
                    }
                }
                
                if (shiftKey && newPoint && snappedDataForCompletedSegment) {
                    const completedSegmentProps = getCompletedSegmentProperties(startPoint, newPoint, allEdges);

                    if (completedSegmentProps) {
                        frozenReference_Origin_Data = completedSegmentProps.startPoint;
                        frozenReference_D_du = completedSegmentProps.length;
                        frozenReference_D_g2g = snappedDataForCompletedSegment.gridToGridSquaredSum > 0 ? { g2gSquaredSum: snappedDataForCompletedSegment.gridToGridSquaredSum, interval: snappedDataForCompletedSegment.gridInterval } : null;
                        frozenReference_A_rad = completedSegmentProps.turnAngleRad;
                        frozenReference_A_baseRad = completedSegmentProps.precedingSegmentAbsoluteAngleRad;
                    } else {
                        frozenReference_D_du = null;
                        frozenReference_D_g2g = null;
                        frozenReference_A_rad = null;
                        frozenReference_A_baseRad = null;
                        frozenReference_Origin_Data = null;
                    }
                } else {
                    frozenReference_D_du = null;
                    frozenReference_D_g2g = null;
                    frozenReference_A_rad = null;
                    frozenReference_A_baseRad = null;
                    frozenReference_Origin_Data = null;
                }
                if (newPoint) previewLineStartPointId = newPoint.id;
                else isDrawingMode = false;
                clickData.count = 0;
            } else {
                const now = Date.now();
                let primaryClickTarget = null;
                if (targetPoint && targetPoint.type !== 'regular') {
                    primaryClickTarget = targetPoint;
                } else if (targetPoint && targetPoint.type === 'regular') {
                    primaryClickTarget = targetPoint;
                } else if (targetEdge) {
                    primaryClickTarget = targetEdge;
                } else {
                    primaryClickTarget = 'canvas';
                }
                
                if (primaryClickTarget !== 'canvas') {
                    const targetId = primaryClickTarget.id || getEdgeId(primaryClickTarget);
                    const targetType = primaryClickTarget.id ? (primaryClickTarget.type !== 'regular' ? 'center' : 'point') : 'edge';
                    
                    if (targetId && clickData.targetId === targetId && (now - clickData.timestamp) < DOUBLE_CLICK_MS) {
                        clickData.count++;
                    } else {
                        clickData.count = 1;
                        clickData.targetId = targetId;
                        clickData.type = targetType;
                    }
                    clickData.timestamp = now;

                    switch (clickData.count) {
                        case 1:
                            if (targetType === 'center') {
                                // This case is now handled in mousedown to set isDraggingCenter
                            } else if (targetType === 'point') {
                                applySelectionLogic([targetId], [], shiftKey, ctrlKey, false);
                            } else if (targetType === 'edge') {
                                applySelectionLogic([], [targetId], shiftKey, ctrlKey, false);
                            }
                            break;
                        case 2:
                            if (targetType === 'point') {
                                const neighbors = findNeighbors(clickData.targetId);
                                applySelectionLogic([clickData.targetId, ...neighbors], [], false, false);
                            } else if (targetType === 'edge') {
                                const edge = allEdges.find(e => getEdgeId(e) === clickData.targetId);
                                if (edge) {
                                    const validNeighborEdges = [...findNeighborEdges(edge.id1), ...findNeighborEdges(edge.id2)].filter(e => findPointById(e.id1) && findPointById(e.id2));
                                    applySelectionLogic([], Array.from(new Set(validNeighborEdges.map(e => getEdgeId(e)))), false, false);
                                }
                            } else if (targetType === 'center') {
                                const center = findPointById(clickData.targetId);
                                if (center) {
                                    const relatedPoints = allPoints.filter(p => p.type === 'regular' && distance(p, center) < (POINT_SELECT_RADIUS * 10 / viewTransform.scale)).map(p => p.id);
                                    const relatedEdges = allEdges.filter(e => relatedPoints.includes(e.id1) && relatedPoints.includes(e.id2)).map(e => getEdgeId(e));
                                    applySelectionLogic(relatedPoints, relatedEdges, shiftKey, ctrlKey, false);
                                }
                            }
                            break;
                        case 3:
                            if (targetType === 'point') {
                                const pointsInSubgraph = findAllPointsInSubgraph(clickData.targetId);
                                applySelectionLogic(pointsInSubgraph, [], false, false);
                            } else if (targetType === 'edge') {
                                const edge = allEdges.find(e => getEdgeId(e) === clickData.targetId);
                                if (edge) {
                                    const pointsInSubgraph = new Set(findAllPointsInSubgraph(edge.id1));
                                    const edgesInSubgraph = allEdges.filter(e => pointsInSubgraph.has(e.id1) && pointsInSubgraph.has(e.id2));
                                    applySelectionLogic([], edgesInSubgraph.map(e => getEdgeId(e)), false, false);
                                }
                            } else if (targetType === 'center') {
                                const allRegularPoints = allPoints.filter(p => p.type === 'regular').map(p => p.id);
                                const allGeometricEdges = allEdges.map(e => getEdgeId(e));
                                applySelectionLogic(allRegularPoints, allGeometricEdges, shiftKey, ctrlKey, false);
                            }
                            clickData.count = 0;
                            break;
                    }
                } else {
                    clickData.count = 0;
                    saveStateForUndo();
                    selectedPointIds = [];
                    selectedEdgeIds = [];
                    selectedCenterIds = [];
                    activeCenterId = null;
                    isDrawingMode = false;
                    previewLineStartPointId = null;
                    const startCoords = ghostPointPosition ? ghostPointPosition : screenToData(mousePos);
                    const newPoint = { id: generateUniqueId(), ...startCoords, type: 'regular', color: currentColor };
                    allPoints.push(newPoint);
                    isDrawingMode = true;
                    previewLineStartPointId = newPoint.id;
                    frozenReference_D_du = null;
                    frozenReference_D_g2g = null;
                    frozenReference_A_rad = null;
                    frozenReference_A_baseRad = null;
                    frozenReference_Origin_Data = null;
                    drawingSequence = [];
                    currentSequenceIndex = 0;
                }
            }
        } else if (currentMouseButton === 2) {
            performEscapeAction();
        }
    }

    isActionInProgress = false;
    isDragConfirmed = false;
    isPanningBackground = false;
    isRectangleSelecting = false;
    actionContext = null;
    actionTargetPoint = null;
    transformIndicatorData = null;
    isEdgeTransformDrag = false;
    isDraggingCenter = false;
    canvas.style.cursor = 'crosshair';
});

window.addEventListener('keyup', (event) => {
    if (event.key === 'Shift') {
        currentShiftPressed = false;
        ghostPointPosition = null;
    }
});

window.addEventListener('keydown', (event) => {
    const isCtrlOrCmd = event.ctrlKey || event.metaKey;
    
    if (isCtrlOrCmd && event.key.toLowerCase() === 'r') {
        event.preventDefault();
        if (isDrawingMode && previewLineStartPointId) {
            handleRepeat();
        }
        return;
    }

    if (event.key === 'Shift') {
        currentShiftPressed = true;
        if (!isActionInProgress && !isDrawingMode) {
            const mouseDataPos = screenToData(mousePos);
            ghostPointPosition = getBestSnapPosition(mouseDataPos);
        }
    }

    const allowedDuringAction = ['Shift', 'Control', 'Meta', 'Alt', 'Escape', 'Delete', 'Backspace'];
    if (isActionInProgress && !allowedDuringAction.includes(event.key) && !(isCtrlOrCmd && ['c','x','v','z','y','a','-','=','+'].includes(event.key.toLowerCase()))) return;

    if (isMouseOverCanvas && isCtrlOrCmd && (event.key === '=' || event.key === '+')) {
        event.preventDefault();
        const centerScreen = { x: (canvas.width/dpr)/2, y: (canvas.height/dpr)/2 };
        zoomAt(centerScreen, 1.15);
        return;
    }
    if (isMouseOverCanvas && isCtrlOrCmd && event.key === '-') {
        event.preventDefault();
        const centerScreen = { x: (canvas.width/dpr)/2, y: (canvas.height/dpr)/2 };
        zoomAt(centerScreen, 1/1.15);
        return;
    }

    if (event.key === ' ') {
        event.preventDefault();
        completeGraphOnSelectedPoints();
    } else if (event.key === 'Escape') {
        performEscapeAction();
    } else if (event.key === 'Delete' || event.key === 'Backspace') {
        deleteSelectedItems();
    } else if (isCtrlOrCmd && event.key.toLowerCase() === 'c') {
        event.preventDefault();
        handleCopy();
    } else if (isCtrlOrCmd && event.key.toLowerCase() === 'x') {
        event.preventDefault();
        handleCut();
    } else if (isCtrlOrCmd && event.key.toLowerCase() === 'v') {
        event.preventDefault();
        handlePaste();
    } else if (isCtrlOrCmd && event.key.toLowerCase() === 'z' && !event.shiftKey) {
        event.preventDefault();
        handleUndo();
    } else if (isCtrlOrCmd && (event.key.toLowerCase() === 'y' || (event.shiftKey && event.key.toLowerCase() === 'z'))) {
        event.preventDefault();
        handleRedo();
    } else if (isCtrlOrCmd && event.key.toLowerCase() === 'a') {
        event.preventDefault();
        selectedPointIds = allPoints.filter(p => p.type === 'regular').map(p => p.id);
        selectedEdgeIds = allEdges.map(edge => getEdgeId(edge));
        
        selectedCenterIds = allPoints.filter(p => p.type !== 'regular').map(p => p.id);
        
        activeCenterId = selectedCenterIds.at(-1) ?? null;
        
    }
});

window.addEventListener('resize', resizeCanvas);

colorPicker.addEventListener('change', (e) => {
    setCurrentColor(e.target.value);
});


window.addEventListener('load', () => {
    if (typeof window.katex === 'undefined') {
        console.error("KaTeX library failed to load or initialize. Math rendering will be broken.");
    }
    initializeCanvasUI();
    buildMainToolbarUI();
    resizeCanvas(); // Ensure canvas.width and canvas.height are correctly set in physical pixels here

    // Set scale to a value where the primary grid interval will be 1
    viewTransform.scale = 70;
    
    // Center view on origin (0,0)
    // canvas.width and canvas.height already hold the physical pixel dimensions.
    // So, dividing by 2 places the origin at the physical center.
    viewTransform.offsetX = canvas.width / 2;
    viewTransform.offsetY = canvas.height / 2;
    
    coordsDisplayMode = 'regular';

    setCurrentColor(currentColor);
    saveStateForUndo();
    gameLoop();
});

function gameLoop() {
    redrawAll();
    requestAnimationFrame(gameLoop);
}

=== style.css ===
:root {
    --container-bg-color: #1e1e1e;
}

html, body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    font-family: Arial, sans-serif;
    background-color: var(--container-bg-color);
}

.container {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
}

.canvas-container {
    flex-grow: 1;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 10px;
    box-sizing: border-box;
}

.canvas-wrapper-relative {
    position: relative;
    width: 100%;
    height: 100%;
}

canvas {
    display: block;
    background-color: #1a1a1a;
    cursor: crosshair;
}

#html-overlay {
    position: absolute;
    top: 0;
    left: 0;
    pointer-events: none;
    width: 100%;
    height: 100%;
}

/* A different method for hiding the color picker */
#colorPicker {
    position: absolute;
    top: 200;
    left: 200;
    width: 1px;
    height: 1px;
    opacity: 0;
    border: none;
    padding: 0;
    /* We are no longer positioning it far off-screen */
}

=== utils.js ===
export function formatNumber(value, sigFigs) {
    if (value === 0) return "0";
    const absValue = Math.abs(value);
    const sign = value < 0 ? "-" : "";
    let formattedString;
    if (absValue >= 1000 || (absValue !== 0 && absValue < 0.001)) {
        const expStr = absValue.toExponential(Math.max(0, sigFigs - 1));
        const parts = expStr.split('e');
        let coefficient = parseFloat(parts[0]).toString();
        let exponent = parseInt(parts[1], 10);
        formattedString = `${coefficient} \\cdot 10^{${exponent}}`;
    } else {
        const integerDigits = absValue < 1 ? 0 : Math.floor(Math.log10(absValue)) + 1;
        let decimalPlacesToDisplay;
        if (absValue === 0) {
            decimalPlacesToDisplay = sigFigs - 1;
        } else if (absValue < 1) {
            let k = 0;
            let temp = absValue;
            while (temp < 1 && k < sigFigs + 5) {
                temp *= 10;
                k++;
            }
            decimalPlacesToDisplay = Math.max(0, (k - 1) + sigFigs);
        } else {
            decimalPlacesToDisplay = Math.max(0, sigFigs - integerDigits);
        }
        decimalPlacesToDisplay = Math.min(decimalPlacesToDisplay, 10);
        let fixedStr = absValue.toFixed(decimalPlacesToDisplay);
        let num = parseFloat(fixedStr);
        if (Math.abs(num) === 0 && value !== 0) {
            return "0";
        }
        formattedString = Math.abs(num).toString();
    }
    return sign + formattedString;
}

export function gcd(a, b) {
    return b === 0 ? a : gcd(b, a % b);
}

export function generateAngleSnapFractions(maxDenominator, maxResultingMultipleOfBase) {
    const fractionsSet = new Set();
    fractionsSet.add(0);
    for (let q = 1; q <= maxDenominator; q++) {
        for (let p = 0; p <= q * maxResultingMultipleOfBase; p++) { // p can be 0 for 0A or 0D
            fractionsSet.add(p / q);
        }
    }
    return Array.from(fractionsSet).sort((a, b) => a - b);
}

export function solveForPoint(N1, N2, d1, alpha) {
    const d_n = distance(N1, N2);
    if (d_n < 1e-6 || Math.sin(alpha) < 1e-6) return [];
    const solutions = [];
    const A = 1,
        B = -2 * d1 * Math.cos(alpha),
        C = d1 * d1 - d_n * d_n;
    const discriminant = B * B - 4 * A * C;
    if (discriminant < 0) return [];

    [(-B + Math.sqrt(discriminant)) / (2 * A), (-B - Math.sqrt(discriminant)) / (2 * A)].forEach(d2 => {
        if (d2 <= 0) return;
        const a = (d1 * d1 - d2 * d2 + d_n * d_n) / (2 * d_n);
        const h = Math.sqrt(Math.max(0, d1 * d1 - a * a));
        const x_mid = N1.x + a * (N2.x - N1.x) / d_n;
        const y_mid = N1.y + a * (N2.y - N1.y) / d_n;
        solutions.push({ x: x_mid + h * (N2.y - N1.y) / d_n, y: y_mid - h * (N2.x - N1.x) / d_n, dist: d1, angle: alpha });
        solutions.push({ x: x_mid - h * (N2.y - N1.y) / d_n, y: y_mid + h * (N2.x - N1.x) / d_n, dist: d1, angle: alpha });
    });
    return solutions;
}

export function generateDistanceSnapFactors() {
    const fractionsSet = new Set();
    fractionsSet.add(0);
    // Denominators up to 6 for factors <= 1
    for (let q = 1; q <= 6; q++) {
        for (let p = 1; p <= q; p++) {
            fractionsSet.add(p / q);
        }
    }
    // Denominators 1 and 2 for factors > 1
    for (let i = 1; i <= 10; i++) {
        fractionsSet.add(i);
        if (i > 1) {
            fractionsSet.add(i - 0.5);
        }
    }
    return Array.from(fractionsSet).sort((a, b) => a - b);
}

export function generateUniqueId() { return crypto.randomUUID(); }

export function normalizeAngle(angleRad) {
    while (angleRad < 0) angleRad += 2 * Math.PI;
    while (angleRad >= 2 * Math.PI) angleRad -= 2 * Math.PI;
    return angleRad;
}

export function normalizeAngleToPi(angleRad) {
    angleRad = normalizeAngle(angleRad);
    if (angleRad > Math.PI) {
        angleRad -= 2 * Math.PI;
    }
    return angleRad;
}

export function normalizeAngleDegrees(angleDeg) {
    while (angleDeg < 0) angleDeg += 360;
    while (angleDeg >= 360) angleDeg -= 360;
    return angleDeg;
}

export function simplifySquareRoot(n) {
    if (n < 0 || !Number.isInteger(n)) return [null, null];
    if (n === 0) return [0, 1];
    
    let coefficient = 1;
    let radicand = n;

    for (let i = 2; i * i <= radicand; i++) {
        while (radicand % (i * i) === 0) {
            radicand /= (i * i);
            coefficient *= i;
        }
    }

    return [coefficient, radicand];
}

export function formatSimplifiedRoot(coeff, radicand, symbol = '') {
    const symString = symbol ? `\\${symbol}` : '';

    if (radicand === 1) {
        // It's a perfect square, no root symbol needed.
        if (coeff === 1 && symbol) return symString;
        return `${coeff}${symString}`;
    }
    if (coeff === 1) {
        // No coefficient needed.
        return `\\sqrt{${radicand}}${symString}`;
    }
    // Default case
    return `${coeff}\\sqrt{${radicand}}${symString}`;
}

export function snapTValue(t, fractions, snapThreshold = 0.05) {
    let bestSnappedT = t;
    let minDiff = snapThreshold;

    if (t < -snapThreshold || t > 1 + snapThreshold) {
        return Math.max(0, Math.min(1, t));
    }

    for (const snapFraction of fractions) {
        const diff = Math.abs(t - snapFraction);
        if (diff < minDiff) {
            minDiff = diff;
            bestSnappedT = snapFraction;
        }
    }
    return Math.max(0, Math.min(1, bestSnappedT));
}

export function distance(p1, p2) { return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)); }

export function formatFraction(decimal, tolerance = 0.015, maxDisplayDenominator = 32) {
    if (Math.abs(decimal) < 0.00001) return "0";
    const originalSign = decimal < 0 ? "-" : "";
    const absDecimal = Math.abs(decimal);

    if (Math.abs(absDecimal - Math.round(absDecimal)) < tolerance) {
      const rounded = Math.round(absDecimal);
      return originalSign + rounded.toString();
    }

    const fractions = [
        [1,2],[1,3],[2,3],[1,4],[3,4],[1,5],[2,5],[3,5],[4,5],[1,6],[5,6],
        [1,8],[3,8],[5,8],[7,8],[1,10],[3,10],[7,10],[9,10],
        [1,12],[5,12],[7,12],[11,12],[1,16],[3,16],[5,16],[7,16],[9,16],[11,16],[13,16],[15,16]
    ];

    for (const [num, den] of fractions) {
        if (den <= maxDisplayDenominator) {
            if (Math.abs(absDecimal - num/den) < tolerance) {
                return originalSign + `${num}/${den}`;
            }
        }
    }

    for (let currentDen = 1; currentDen <= maxDisplayDenominator; currentDen++) {
        const currentNum = Math.round(absDecimal * currentDen);
        if (currentNum === 0 && absDecimal > 0.00001) continue;
        if (Math.abs(absDecimal - currentNum / currentDen) < tolerance / currentDen) {
            const common = gcd(currentNum, currentDen);
            const n = currentNum/common;
            const d = currentDen/common;
            if (d === 1) return originalSign + `${n}`;
            return originalSign + `${n}/${d}`;
        }
    }
    let fixedPrecision = 2;
         if (absDecimal < 0.01) fixedPrecision = 3;
    else if (absDecimal < 0.1)  fixedPrecision = 2;
    else if (absDecimal < 10)   fixedPrecision = 1;
    else                        fixedPrecision = 0;
    
    return originalSign + absDecimal.toFixed(fixedPrecision);
}

export function formatCoordinateValue(value, decimalPlaces) {
    if (typeof value !== 'number' || isNaN(value)) {
        return '...';
    }
    const sign = value < 0 ? "-" : "\\phantom{-}";
    const fixedValue = Math.abs(value).toFixed(decimalPlaces);
    return sign + fixedValue;
}

export function normalize(v) {
    const mag = Math.hypot(v.x, v.y);
    if (mag === 0) return { x: 0, y: 0 };
    return { x: v.x / mag, y: v.y / mag };
}

export function getClosestPointOnLineSegment(p, a, b) {
    const abx = b.x - a.x;
    const aby = b.y - a.y;
    const acx = p.x - a.x;
    const acy = p.y - a.y;
    const lenSqAB = abx * abx + aby * aby;

    if (lenSqAB === 0) {
        return { x: a.x, y: a.y, distance: distance(p, a), onSegmentStrict: true, t: 0 };
    }
    let t = (acx * abx + acy * aby) / lenSqAB;
    const onSegmentStrict = t > 0.00001 && t < 0.99999;
    const clampedT = Math.max(0, Math.min(1, t));
    const closestX = a.x + clampedT * abx;
    const closestY = a.y + clampedT * aby;
    const dist = distance(p, { x: closestX, y: closestY });
    return { x: closestX, y: closestY, distance: dist, onSegmentStrict: onSegmentStrict, t: clampedT };
}

export function getMousePosOnCanvas(event, canvasElement) {
    const rect = canvasElement.getBoundingClientRect();
    return { x: event.clientX - rect.left, y: event.clientY - rect.top };
}

export function snapToAngle(targetAngleRad, offsetAngleRad, angleSnapFractionsArray, baseReferenceAngleRad, forceSnap = false) {
    if (isNaN(targetAngleRad) || isNaN(offsetAngleRad) || Math.abs(baseReferenceAngleRad) < 1e-9) {
        const defaultAngle = isNaN(offsetAngleRad) ? 0 : offsetAngleRad;
        return { angle: defaultAngle, turn: 0, factor: null };
    }
    let bestSnappedAngleRad = targetAngleRad;
    let minAngleDifference = Infinity;
    let bestTurn = normalizeAngleToPi(targetAngleRad - offsetAngleRad);
    let bestFactor = null;

    // Calculate the maximum allowed snap factor to keep the turn <= 180 degrees (PI).
    // Add a small tolerance to avoid floating point inaccuracies.
    const maxAllowedFactor = (Math.PI + 0.0001) / Math.abs(baseReferenceAngleRad);

    for (const fraction of angleSnapFractionsArray) {
        // Ensure the snap factor does not result in a turn greater than a half circle.
        if (fraction > maxAllowedFactor) {
            continue;
        }

        const snapIncrementRad = baseReferenceAngleRad * fraction;

        const potentialSnapAngleCCW = normalizeAngle(offsetAngleRad + snapIncrementRad);
        let diffCCW = Math.abs(normalizeAngleToPi(targetAngleRad - potentialSnapAngleCCW));
        if (diffCCW < minAngleDifference) {
            minAngleDifference = diffCCW;
            bestSnappedAngleRad = potentialSnapAngleCCW;
            bestTurn = snapIncrementRad;
            bestFactor = fraction;
        }

        if (fraction !== 0) {
            const potentialSnapAngleCW = normalizeAngle(offsetAngleRad - snapIncrementRad);
            let diffCW = Math.abs(normalizeAngleToPi(targetAngleRad - potentialSnapAngleCW));
            if (diffCW < minAngleDifference) {
                minAngleDifference = diffCW;
                bestSnappedAngleRad = potentialSnapAngleCW;
                bestTurn = -snapIncrementRad;
                bestFactor = -fraction;
            }
        }
    }

    const snapThresholdRad = Math.PI / 24;
    if (forceSnap || minAngleDifference < snapThresholdRad) {
        return { angle: bestSnappedAngleRad, turn: bestTurn, factor: bestFactor };
    }

    return { angle: targetAngleRad, turn: normalizeAngleToPi(targetAngleRad - offsetAngleRad), factor: null };
}

export function hslToRgb(h, s, l) {
    let r, g, b;

    if (s === 0) {
        r = g = b = l; // This handles the gray (achromatic) case
    } else {
        const hue2rgb = (p, q, t) => {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p + (q - p) * 6 * t;
            if (t < 1 / 2) return q;
            if (t < 2 / 3) return p + (q - p) * (6 * (2 / 3 - t));
            return p;
        };

        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }

    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
}

export function formatSnapFactor(factor, symbol) {
    const fractionStr = formatFraction(factor, 0.001);
    const newSymbol = symbol === 'A' ? '\\theta' : (symbol === 'D' ? '\\delta' : symbol);
    
    if (fractionStr === "0") return `0${newSymbol}`;
    if (fractionStr === "1") return newSymbol;
    if (fractionStr === "-1") return `-${newSymbol}`;

    if (fractionStr.endsWith("/1")) {
        return `${fractionStr.slice(0, -2)}${newSymbol}`;
    }

    if (fractionStr.includes('/')) {
        let sign = '';
        let workStr = fractionStr;
        if (workStr.startsWith('-')) {
            sign = '-';
            workStr = workStr.substring(1);
        }

        const parts = workStr.split('/');
        const num = parts[0];
        const den = parts[1];
        
        if (num === "1") return `${sign}\\frac{1}{${den}}${newSymbol}`;
        return `${sign}\\frac{${num}}{${den}}${newSymbol}`;
    }
    return `${fractionStr}${newSymbol}`;
}

=== write_content_to_file.py ===
--- CONTENT EXCLUDED (listed in exclude_files) ---


